export declare const errors: {
    readonly invalidParameter: {
        readonly name: "invalidParameter";
        readonly detail: "";
        readonly solution: "";
    };
    readonly invalidRequestParameter: {
        readonly name: "invalidRequestParameter";
        readonly detail: "リクエストの値が不正です";
        readonly solution: "正しい値を入力してください";
    };
    readonly notFound: {
        readonly name: "notFound";
        readonly detail: "対象のリソースが見つかりません";
        readonly solution: "対象のリソースが存在するか確かめてください";
    };
    readonly maxSubscriberExceededError: {
        readonly name: "maxSubscribersExceededError";
        readonly detail: "forwardingのmaxSubscribersの制限を超えています。maxSubscribersの値を超えてSubscribeすることはできません";
        readonly solution: "maxSubscribersの範囲内でご利用ください";
    };
    readonly quotaExceededError: {
        readonly name: "quotaExceededError";
        readonly detail: "リソースの制限量を超えてリソースを利用することはできません";
        readonly solution: "リソース制限量の範囲内でご利用ください";
    };
    readonly timeout: {
        readonly name: "timeout";
        readonly detail: "";
        readonly solution: "";
    };
    readonly insufficientPermissions: {
        readonly name: "insufficientPermissions";
        readonly detail: "tokenの権限が不足しています";
        readonly solution: "tokenに必要な権限を付与してください";
    };
    readonly backendError: {
        readonly name: "backendError:";
        readonly detail: "";
        readonly solution: "";
    };
    readonly notAllowedConsumeError: {
        readonly name: "notAllowedConsumeError";
        readonly detail: "ForwardingからのConsume許可がありません";
        readonly solution: "Forwardingしているmemberによる許可操作が必要です";
    };
};
//# sourceMappingURL=errors.d.ts.map
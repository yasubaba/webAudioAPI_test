export declare const errors: {
    readonly invalidParameter: {
        readonly name: "invalidParameter";
        readonly detail: "";
        readonly solution: "";
    };
    readonly timeout: {
        readonly name: "timeout";
        readonly detail: "";
        readonly solution: "";
    };
    readonly internal: {
        readonly name: "internal";
        readonly detail: "";
        readonly solution: "";
    };
    readonly sfuBotNotInChannel: {
        readonly name: "sfuBotNotInChannel";
        readonly detail: "SfuBotがChannelに存在しません";
        readonly solution: "操作しようとしているSfuBotが正しいか確かめてください";
    };
    readonly maxSubscribersMustNotBeZero: {
        readonly name: "maxSubscribersMustNotBeZero";
        readonly detail: "maxSubscribersは１以上である必要があります";
        readonly solution: "正しい値を入力してください";
    };
    readonly remotePublisherId: {
        readonly name: "remotePublisherId";
        readonly detail: "publisherがremoteのPublicationをForwardingすることはできません";
        readonly solution: "PublicationがLocalでPublishされたものか確かめてください";
    };
    readonly dataStreamNotSupported: {
        readonly name: "dataStreamNotSupported";
        readonly detail: "dataStreamはSFUに対応していません";
        readonly solution: "ありません";
    };
    readonly streamNotExistInPublication: {
        readonly name: "streamNotExistInPublication";
        readonly detail: "PublicationにStreamがありません。RemoteMemberのPublicationのStreamにはアクセスできません";
        readonly solution: "参照しているPublicationが目的のものか確かめてください。";
    };
    readonly invalidPreferredEncoding: {
        readonly name: "invalidPreferredEncoding";
        readonly detail: "preferredEncodingの値が不正です。エンコード設定切り替え機能が使えません";
        readonly solution: "正しい文字列を入力してください";
    };
    readonly invalidEncodings: {
        readonly name: "invalidEncodings";
        readonly detail: "エンコード設定が設定されていません。エンコード設定切り替え機能が使えません";
        readonly solution: "エンコード設定切り替え機能を利用する場合はエンコード設定をしたPublicationをForwardingしてください";
    };
    readonly receiverNotFound: {
        readonly name: "receiverNotFound";
        readonly detail: "SFUはRemoteMemberのSubscriptionを操作できません";
        readonly solution: "SFUでsubscriptionの操作をする際にはLocalPersonがSubscribeしているSubscriptionインスタンスを利用してください";
    };
    readonly consumerNotFound: {
        readonly name: "consumerNotFound";
        readonly detail: "SFUはLocalPersonがUnsubscribeしたSubscriptionを操出来ません";
        readonly solution: "操作対象のSubscriptionが正しいか確かめてください";
    };
    readonly forwardingNotFound: {
        readonly name: "forwardingNotFound";
        readonly detail: "存在しないForwardingを操作しようとしています";
        readonly solution: "対象のForwardingが正しいか確かめてください";
    };
    readonly netWorkError: {
        readonly name: "netWorkError";
        readonly detail: "通信環境に問題があります";
        readonly solution: "ネットワーク接続状況を確認してください";
    };
    readonly confirmSubscriptionFailed: {
        readonly name: "confirmSubscriptionFailed";
        readonly detail: "Forwardingのconsume許可を出すのに失敗しました";
        readonly solution: "ありません";
    };
    readonly invalidRequestParameter: {
        readonly name: "invalidRequestParameter";
        readonly detail: "リクエストの値が不正です";
        readonly solution: "正しい値を入力してください";
    };
    readonly notFound: {
        readonly name: "notFound";
        readonly detail: "対象のリソースが見つかりません";
        readonly solution: "対象のリソースが存在するか確かめてください";
    };
    readonly maxSubscriberExceededError: {
        readonly name: "maxSubscribersExceededError";
        readonly detail: "forwardingのmaxSubscribersの制限を超えています。maxSubscribersの値を超えてSubscribeすることはできません";
        readonly solution: "maxSubscribersの範囲内でご利用ください";
    };
    readonly quotaExceededError: {
        readonly name: "quotaExceededError";
        readonly detail: "リソースの制限量を超えてリソースを利用することはできません";
        readonly solution: "リソース制限量の範囲内でご利用ください";
    };
    readonly insufficientPermissions: {
        readonly name: "insufficientPermissions";
        readonly detail: "tokenの権限が不足しています";
        readonly solution: "tokenに必要な権限を付与してください";
    };
    readonly backendError: {
        readonly name: "backendError:";
        readonly detail: "";
        readonly solution: "";
    };
    readonly notAllowedConsumeError: {
        readonly name: "notAllowedConsumeError";
        readonly detail: "ForwardingからのConsume許可がありません";
        readonly solution: "Forwardingしているmemberによる許可操作が必要です";
    };
};
//# sourceMappingURL=errors.d.ts.map
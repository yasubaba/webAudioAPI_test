import { IceManager, LocalPersonImpl, RemoteStream, SkyWayContext, SubscriptionImpl } from '@skyway-sdk/core';
import { SfuRestApiClient } from '@skyway-sdk/sfu-api-client';
import { Consumer } from 'mediasoup-client/lib/Consumer';
import { SfuBotMember } from '../member';
import { SfuTransport } from './transport/transport';
import { TransportRepository } from './transport/transportRepository';
export declare class Receiver {
    readonly subscription: SubscriptionImpl;
    private readonly _api;
    private readonly _transportRepository;
    private _localPerson;
    private _bot;
    private _iceManager;
    private _context;
    consumer?: Consumer;
    transport?: SfuTransport;
    private _disposer;
    private sendSubscriptionStatsReportTimer;
    private _waitingSendSubscriptionStatsReports;
    constructor(subscription: SubscriptionImpl, _api: SfuRestApiClient, _transportRepository: TransportRepository, _localPerson: LocalPersonImpl, _bot: SfuBotMember, _iceManager: IceManager, _context: SkyWayContext);
    toJSON(): {
        transport: SfuTransport | undefined;
        subscription: SubscriptionImpl<RemoteStream>;
    };
    /**@throws {maxSubscriberExceededError} */
    consume(): Promise<{
        stream: RemoteStream;
        codec: {
            mimeType: string;
            parameters: any;
        };
    }>;
    private _setupTransportAccessForStream;
    unconsume(): void;
    close(): void;
    get pc(): RTCPeerConnection | undefined;
    private startSendSubscriptionStatsReportTimer;
}
//# sourceMappingURL=receiver.d.ts.map
import { Event } from '@skyway-sdk/common';
import { Publication, SkyWayContext, Subscription } from '@skyway-sdk/core';
import { SfuRestApiClient } from '@skyway-sdk/sfu-api-client';
export declare class Forwarding {
    private props;
    state: ForwardingState;
    configure: ForwardingConfigure;
    originPublication: Publication;
    relayingPublication: Publication;
    private _identifierKey;
    private _api;
    private _context;
    /** @description [japanese] forwardingが終了された時に発火するイベント */
    readonly onStopped: Event<void>;
    /**@internal */
    constructor(props: {
        configure: ForwardingConfigure;
        originPublication: Publication;
        relayingPublication: Publication;
        api: SfuRestApiClient;
        context: SkyWayContext;
        identifierKey: string;
    });
    get id(): string;
    /**@private */
    _stop(): void;
    /**@internal */
    toJSON(): {
        id: string;
        configure: ForwardingConfigure;
        originPublication: Publication<import("@skyway-sdk/core").LocalStream>;
        relayingPublication: Publication<import("@skyway-sdk/core").LocalStream>;
    };
    confirmSubscription(subscription: Subscription): Promise<void>;
}
export declare type ForwardingState = 'started' | 'stopped';
export interface ForwardingConfigure {
    maxSubscribers: number;
}
//# sourceMappingURL=forwarding.d.ts.map
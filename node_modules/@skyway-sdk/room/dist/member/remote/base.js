"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteRoomMemberImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const core_1 = require("@skyway-sdk/core");
const errors_1 = require("../../errors");
const member_1 = require("../../member");
const util_1 = require("../../util");
const log = new common_1.Logger('packages/room/src/member/remote/base.ts');
/**@internal */
class RemoteRoomMemberImpl extends member_1.RoomMemberImpl {
    constructor(member, room) {
        super(member, room);
        this.side = 'remote';
        this.onPublicationSubscribed = new common_1.Event();
        this.onPublicationUnsubscribed = new common_1.Event();
        this.onSubscriptionListChanged = new common_1.Event();
        this.onPublicationListChanged = new common_1.Event();
        this._disposer = new common_1.EventDisposer();
        this.subscribe = (publicationId) => new Promise((r, f) => {
            if (!(this.member instanceof core_1.RemotePersonImpl)) {
                f((0, util_1.createError)({
                    operationName: 'RemoteRoomMemberImpl.subscribe',
                    context: this.room._context,
                    room: this.room,
                    info: errors_1.errors.subscribeOtherMemberType,
                    path: log.prefix,
                }));
                return;
            }
            let failed = false;
            this.member.subscribe(publicationId).catch((e) => {
                failed = true;
                f(e);
            });
            this.onPublicationSubscribed
                .watch((e) => e.subscription.publication.id === publicationId)
                .then((e) => r(e))
                .catch((e) => {
                if (!failed)
                    f(e);
            });
        });
        this.unsubscribe = (subscriptionId) => new Promise((r, f) => {
            if (!(this.member instanceof core_1.RemotePersonImpl)) {
                f((0, util_1.createError)({
                    operationName: 'RemoteRoomMemberImpl.unsubscribe',
                    context: this.room._context,
                    room: this.room,
                    info: errors_1.errors.subscribeOtherMemberType,
                    path: log.prefix,
                }));
                return;
            }
            let failed = false;
            this.member.unsubscribe(subscriptionId).catch((e) => {
                failed = true;
                f(e);
            });
            this.onPublicationUnsubscribed
                .watch((e) => e.subscription.id === subscriptionId)
                .then(() => r())
                .catch((e) => {
                if (!failed)
                    f(e);
            });
        });
        room.onPublicationSubscribed
            .add((e) => {
            if (e.subscription.subscriber._member.id ===
                member.id) {
                this.onPublicationSubscribed.emit(e);
                this.onSubscriptionListChanged.emit();
            }
        })
            .disposer(this._disposer);
        room.onPublicationUnsubscribed
            .add((e) => {
            if (e.subscription.subscriber._member.id ===
                member.id) {
                this.onPublicationUnsubscribed.emit(e);
                this.onSubscriptionListChanged.emit();
            }
        })
            .disposer(this._disposer);
        if (member instanceof core_1.RemotePersonImpl) {
            member.onPublicationListChanged
                .pipe(this.onPublicationListChanged)
                .disposer(this._disposer);
        }
    }
    /**@private */
    _dispose() {
        this._disposer.dispose();
    }
}
exports.RemoteRoomMemberImpl = RemoteRoomMemberImpl;
//# sourceMappingURL=base.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalRoomMemberImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const member_1 = require("../../member");
/**@internal */
class LocalRoomMemberImpl extends member_1.RoomMemberImpl {
    /**@private */
    constructor(member, room) {
        super(member, room);
        this.side = 'local';
        this._local = this._member;
        this.onStreamPublished = new common_1.Event();
        this.onStreamUnpublished = new common_1.Event();
        this.onPublicationListChanged = new common_1.Event();
        this.onPublicationSubscribed = new common_1.Event();
        this.onPublicationUnsubscribed = new common_1.Event();
        this.onSubscriptionListChanged = new common_1.Event();
        this.onFatalError = new common_1.Event();
        this._context = this.room._context;
        this._local.onPublicationSubscribed.add((e) => __awaiter(this, void 0, void 0, function* () {
            const roomSubscription = room._addSubscription(e.subscription);
            this.onPublicationSubscribed.emit({
                subscription: roomSubscription,
                stream: e.stream,
            });
        }));
        this._local.onFatalError.pipe(this.onFatalError);
        this._listenRoomEvent();
        this.onStreamPublished.add(() => this.onPublicationListChanged.emit());
        this.onStreamUnpublished.add(() => this.onPublicationListChanged.emit());
        this.onPublicationSubscribed.add(() => this.onSubscriptionListChanged.emit());
        this.onPublicationUnsubscribed.add(() => this.onSubscriptionListChanged.emit());
    }
    get subscriptions() {
        return this.member.subscriptions
            .map((s) => this.room._getSubscription(s.id))
            .filter((s) => s.stream);
    }
    _listenRoomEvent() {
        this.room.onPublicationUnsubscribed.add((e) => {
            if (e.subscription.subscriber._member.id ===
                this._local.id) {
                this.onPublicationUnsubscribed.emit(e);
            }
        });
    }
}
exports.LocalRoomMemberImpl = LocalRoomMemberImpl;
//# sourceMappingURL=base.js.map
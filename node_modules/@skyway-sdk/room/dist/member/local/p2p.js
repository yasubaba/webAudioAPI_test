"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalP2PRoomMemberImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const errors_1 = require("../../errors");
const util_1 = require("../../util");
const base_1 = require("./base");
const log = new common_1.Logger('packages/room/src/member/local/p2p.ts');
/**@internal */
class LocalP2PRoomMemberImpl extends base_1.LocalRoomMemberImpl {
    /**@private */
    constructor(member, room) {
        super(member, room);
    }
    publish(stream, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const publication = yield this._local.publish(stream, options);
            const roomPublication = this.room._addPublication(publication);
            this.onStreamPublished.emit({ publication: roomPublication });
            return roomPublication;
        });
    }
    unpublish(target) {
        return __awaiter(this, void 0, void 0, function* () {
            const publicationId = typeof target === 'string' ? target : target.id;
            this._local.unpublish(publicationId).catch((error) => {
                log.error('unpublish', error, { target }, this.toJSON());
            });
            const { publication } = yield this.room.onStreamUnpublished
                .watch((e) => e.publication.id === publicationId, this._context.config.rtcApi.timeout)
                .catch((error) => {
                throw (0, util_1.createError)({
                    operationName: 'LocalP2PRoomMemberImpl.unpublish',
                    context: this._context,
                    room: this.room,
                    info: Object.assign(Object.assign({}, errors_1.errors.timeout), { detail: 'onStreamUnpublished' }),
                    path: log.prefix,
                    error,
                });
            });
            this.onStreamUnpublished.emit({ publication });
        });
    }
    subscribe(target) {
        return __awaiter(this, void 0, void 0, function* () {
            const publicationId = typeof target === 'string' ? target : target.id;
            const { subscription, stream } = yield this._local.subscribe(publicationId);
            const roomSubscription = this.room._addSubscription(subscription);
            return {
                subscription: roomSubscription,
                stream: stream,
            };
        });
    }
    unsubscribe(target) {
        return __awaiter(this, void 0, void 0, function* () {
            const subscriptionId = typeof target === 'string' ? target : target.id;
            this._local.unsubscribe(subscriptionId).catch((error) => {
                log.error('unsubscribe', error, { target }, this.toJSON());
            });
            yield this.room.onPublicationUnsubscribed
                .watch((e) => e.subscription.id === subscriptionId, this._context.config.rtcApi.timeout)
                .catch((error) => {
                throw (0, util_1.createError)({
                    operationName: 'LocalP2PRoomMemberImpl.unsubscribe',
                    context: this._context,
                    room: this.room,
                    info: Object.assign(Object.assign({}, errors_1.errors.timeout), { detail: 'onPublicationUnsubscribed' }),
                    path: log.prefix,
                    error,
                });
            });
        });
    }
    _updateRoom(room) {
        log.debug('_updateRoom', { memberId: this.id });
        this.room = room;
        this._listenRoomEvent();
    }
}
exports.LocalP2PRoomMemberImpl = LocalP2PRoomMemberImpl;
//# sourceMappingURL=p2p.js.map
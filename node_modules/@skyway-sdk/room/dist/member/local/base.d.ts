import { Event, SkyWayError } from '@skyway-sdk/common';
import { LocalPerson, LocalPersonAdapter, PublicationOptions, RemoteAudioStream, RemoteDataStream, RemoteVideoStream, SubscriptionOptions } from '@skyway-sdk/core';
import { RoomMember, RoomMemberImpl } from '../../member';
import { RoomPublication } from '../../publication';
import { Room, RoomImpl } from '../../room/base';
import { RoomSubscription } from '../../subscription';
export interface LocalRoomMember extends RoomMember {
    side: 'local';
    room: Room;
    /**@private */
    _updateRoom(room: Room): void;
    /**
     * @description [japanese] このMemberがStreamをPublishしたときに発火するイベント
     */
    onStreamPublished: Event<{
        publication: RoomPublication;
    }>;
    /**
     * @description [japanese] このMemberがStreamをUnPublishしたときに発火するイベント
     */
    onStreamUnpublished: Event<{
        publication: RoomPublication;
    }>;
    /**
     * @description [japanese] Publicationの数が変化した時に発火するイベント
     */
    onPublicationListChanged: Event<void>;
    /**
     * @description [japanese] このMemberがStreamをSubscribeしたときに発火するイベント
     */
    onPublicationSubscribed: Event<{
        subscription: RoomSubscription;
        stream: RemoteVideoStream | RemoteAudioStream | RemoteDataStream;
    }>;
    /**
     * @description [japanese] このMemberがStreamをUnsubscribeしたときに発火するイベント
     */
    onPublicationUnsubscribed: Event<{
        subscription: RoomSubscription;
    }>;
    /**
     * @description [japanese] Subscriptionの数が変化した時に発火するイベント
     */
    onSubscriptionListChanged: Event<void>;
    /**
     * @description [japanese] 回復不能なエラー。このインスタンスは継続して利用できない。
     */
    readonly onFatalError: Event<SkyWayError>;
    /**
     * @description [japanese] StreamのPublicationをUnpublishする
     */
    unpublish: (publicationId: string | RoomPublication) => Promise<void>;
    /**
     * @description [japanese] StreamのPublicationをSubscribeする
     */
    subscribe: <T extends RemoteVideoStream | RemoteAudioStream | RemoteDataStream>(publicationId: string | RoomPublication, options?: SubscriptionOptions) => Promise<{
        subscription: RoomSubscription<T>;
        stream: T;
    }>;
    /**
     * @description [japanese] StreamのSubscriptionをUnsubscribeする
     */
    unsubscribe: (subscriptionId: string | RoomSubscription) => Promise<void>;
}
/**@internal */
export declare abstract class LocalRoomMemberImpl extends RoomMemberImpl implements LocalRoomMember {
    readonly side = "local";
    readonly _local: LocalPerson;
    readonly onStreamPublished: Event<{
        publication: RoomPublication;
    }>;
    readonly onStreamUnpublished: Event<{
        publication: RoomPublication;
    }>;
    readonly onPublicationListChanged: Event<void>;
    readonly onPublicationSubscribed: Event<{
        subscription: RoomSubscription;
        stream: RemoteVideoStream | RemoteAudioStream | RemoteDataStream;
    }>;
    readonly onPublicationUnsubscribed: Event<{
        subscription: RoomSubscription;
    }>;
    readonly onSubscriptionListChanged: Event<void>;
    readonly onFatalError: Event<SkyWayError<Record<string, any>>>;
    readonly _context: import("@skyway-sdk/core").SkyWayContext;
    /**@private */
    constructor(member: LocalPersonAdapter, room: RoomImpl);
    get subscriptions(): import("../../subscription").RoomSubscriptionImpl<import("@skyway-sdk/core").RemoteStream>[];
    protected _listenRoomEvent(): void;
    abstract unpublish(publicationId: string | RoomPublication): Promise<void>;
    abstract subscribe<T extends RemoteVideoStream | RemoteAudioStream | RemoteDataStream>(publicationId: string | RoomPublication): Promise<{
        subscription: RoomSubscription<T>;
        stream: T;
    }>;
    abstract unsubscribe(subscriptionId: string | RoomSubscription): Promise<void>;
    abstract _updateRoom(room: Room): void;
}
export declare type RoomPublicationOptions = PublicationOptions & {
    /**sfu only */
    maxSubscribers?: number;
};
//# sourceMappingURL=base.d.ts.map
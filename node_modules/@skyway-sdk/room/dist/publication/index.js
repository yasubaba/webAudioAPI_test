"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomPublicationImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const common_2 = require("@skyway-sdk/common");
const sfu_bot_1 = require("@skyway-sdk/sfu-bot");
const errors_1 = require("../errors");
const util_1 = require("../util");
const path = 'packages/room/src/publication/index.ts';
const logger = new common_1.Logger(path);
/**@internal */
class RoomPublicationImpl {
    constructor(_publication, _room) {
        var _a;
        this._publication = _publication;
        this._room = _room;
        this._disposer = new common_1.EventDisposer();
        this._events = new common_2.Events();
        this.onCanceled = this._events.make();
        this.onSubscribed = this._events.make();
        this.onUnsubscribed = this._events.make();
        this.onSubscriptionListChanged = this._events.make();
        this.onMetadataUpdated = this._events.make();
        this.onEnabled = this._events.make();
        this.onDisabled = this._events.make();
        this.onStateChanged = this._events.make();
        this.onConnectionStateChanged = new common_2.Event();
        this.enable = () => new Promise((r, f) => {
            if (this._origin) {
                Promise.all([
                    this._origin.enable(),
                    this._publication.onEnabled.asPromise(),
                ])
                    .then(() => r())
                    .catch(f);
            }
            else {
                this._publication.enable().then(r).catch(f);
            }
        });
        this.disable = () => new Promise((r, f) => {
            if (this._origin) {
                Promise.all([
                    this._origin.disable(),
                    this._publication.onDisabled.asPromise(),
                ])
                    .then(() => r())
                    .catch(f);
            }
            else {
                this._publication.disable().then(r).catch(f);
            }
        });
        this.replaceStream = (stream, options = {}) => {
            this._preferredPublication.replaceStream(stream, options);
        };
        this.id = _publication.id;
        this.contentType = _publication.contentType;
        this._origin = _publication.origin;
        {
            const publication = (_a = this._origin) !== null && _a !== void 0 ? _a : this._publication;
            this.publisher = this._room._getMember(publication.publisher.id);
        }
        this._setEvents();
    }
    _setEvents() {
        var _a;
        this._room.onStreamUnpublished.add((e) => {
            if (e.publication.id === this.id) {
                this._dispose();
            }
        });
        this._room.onPublicationSubscribed
            .add((e) => {
            if (e.subscription.publication.id === this.id) {
                this.onSubscribed.emit({ subscription: e.subscription });
                this.onSubscriptionListChanged.emit();
            }
        })
            .disposer(this._disposer);
        this._room.onPublicationUnsubscribed
            .add((e) => {
            if (e.subscription.publication.id === this.id) {
                this.onUnsubscribed.emit({ subscription: e.subscription });
                this.onSubscriptionListChanged.emit();
            }
        })
            .disposer(this._disposer);
        this._publication.onEnabled.pipe(this.onEnabled);
        this._publication.onDisabled.pipe(this.onDisabled);
        this._publication.onStateChanged.pipe(this.onStateChanged);
        {
            const publication = (_a = this._origin) !== null && _a !== void 0 ? _a : this._publication;
            publication.onMetadataUpdated.pipe(this.onMetadataUpdated);
        }
        if (this._origin) {
            this._origin.onConnectionStateChanged.add((e) => {
                logger.debug('this._origin.onConnectionStateChanged', this.id, e);
                this.onConnectionStateChanged.emit({ state: e.state });
            });
        }
        else {
            this._publication.onConnectionStateChanged.add((e) => {
                logger.debug('this._publication.onConnectionStateChanged', this.id, e);
                this.onConnectionStateChanged.emit({
                    state: e.state,
                    remoteMember: this._room._getMember(e.remoteMember.id),
                });
            });
        }
    }
    get subscriptions() {
        return this._publication.subscriptions.map((s) => this._room._getSubscription(s.id));
    }
    get _preferredPublication() {
        var _a;
        return (_a = this._origin) !== null && _a !== void 0 ? _a : this._publication;
    }
    get codecCapabilities() {
        return this._preferredPublication.codecCapabilities;
    }
    get encodings() {
        return this._preferredPublication.encodings;
    }
    get stream() {
        return this._preferredPublication.stream;
    }
    get state() {
        return this._preferredPublication.state;
    }
    get metadata() {
        return this._preferredPublication.metadata;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                this._preferredPublication.cancel(),
                this.onCanceled.asPromise(),
            ]);
        });
    }
    updateMetadata(metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._preferredPublication.updateMetadata(metadata);
        });
    }
    updateEncodings(encodings) {
        this._preferredPublication.updateEncodings(encodings);
    }
    _dispose() {
        this.onCanceled.emit();
        this._events.dispose();
        this._disposer.dispose();
    }
    getStats(selector) {
        var _a;
        if (this._origin) {
            const bot = (_a = this._origin.subscriptions.find((s) => s.subscriber.subtype === sfu_bot_1.SfuBotMember.subtype)) === null || _a === void 0 ? void 0 : _a.subscriber;
            if (!bot) {
                throw (0, util_1.createError)({
                    operationName: 'RoomPublicationImpl.getStats',
                    room: this._room,
                    path,
                    info: Object.assign(Object.assign({}, errors_1.errors.notFound), { detail: 'bot not found' }),
                });
            }
            return this._origin.getStats(bot);
        }
        else {
            const id = typeof selector === 'string' ? selector : selector.id;
            return this._publication.getStats(id);
        }
    }
    getRTCPeerConnection(selector) {
        var _a;
        if (this._origin) {
            const bot = (_a = this._origin.subscriptions.find((s) => s.subscriber.subtype === sfu_bot_1.SfuBotMember.subtype)) === null || _a === void 0 ? void 0 : _a.subscriber;
            if (!bot) {
                throw (0, util_1.createError)({
                    operationName: 'RoomPublicationImpl.getRTCPeerConnection',
                    room: this._room,
                    path,
                    info: Object.assign(Object.assign({}, errors_1.errors.notFound), { detail: 'bot not found' }),
                });
            }
            return this._origin.getRTCPeerConnection(bot);
        }
        else {
            const id = typeof selector === 'string' ? selector : selector.id;
            return this._publication.getRTCPeerConnection(id);
        }
    }
    getConnectionState(selector) {
        var _a;
        if (this._origin) {
            const bot = (_a = this._origin.subscriptions.find((s) => s.subscriber.subtype === sfu_bot_1.SfuBotMember.subtype)) === null || _a === void 0 ? void 0 : _a.subscriber;
            if (!bot) {
                throw (0, util_1.createError)({
                    operationName: 'RoomPublicationImpl.getConnectionState',
                    room: this._room,
                    path,
                    info: Object.assign(Object.assign({}, errors_1.errors.notFound), { detail: 'bot not found' }),
                });
            }
            return this._origin.getConnectionState(bot);
        }
        else {
            const id = typeof selector === 'string' ? selector : selector.id;
            return this._publication.getConnectionState(id);
        }
    }
    toJSON() {
        return {
            id: this.id,
            contentType: this.contentType,
            metadata: this.metadata,
            publisher: this.publisher,
            subscriptions: this.subscriptions,
            codecCapabilities: this.codecCapabilities,
            encodings: this.encodings,
            state: this.state,
        };
    }
}
exports.RoomPublicationImpl = RoomPublicationImpl;
//# sourceMappingURL=index.js.map
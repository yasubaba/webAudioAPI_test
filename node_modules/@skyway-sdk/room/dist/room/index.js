"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.roomTypes = exports.SkyWayRoom = void 0;
const common_1 = require("@skyway-sdk/common");
const core_1 = require("@skyway-sdk/core");
const sfu_bot_1 = require("@skyway-sdk/sfu-bot");
const uuid_1 = require("uuid");
const errors_1 = require("../errors");
const version_1 = require("../version");
const p2p_1 = require("./p2p");
const sfu_1 = require("./sfu");
const log = new common_1.Logger('packages/room/src/room/index.ts');
class SkyWayRoom {
    /**@private */
    constructor() { }
}
exports.SkyWayRoom = SkyWayRoom;
_a = SkyWayRoom;
/**
 * @description [japanese] Roomの作成
 */
SkyWayRoom.Create = (context, init) => __awaiter(void 0, void 0, void 0, function* () {
    var _b, _c;
    log.info('room created', {
        operationName: 'SkyWayRoom._Factory',
        sdkName: 'room',
        sdkVersion: version_1.PACKAGE_VERSION,
        init,
    });
    const plugin = new sfu_bot_1.SfuBotPlugin((_b = init === null || init === void 0 ? void 0 : init.options) === null || _b === void 0 ? void 0 : _b.sfu);
    context.registerPlugin(plugin);
    const channel = yield core_1.SkyWayChannel.Create(context, {
        name: (_c = init.name) !== null && _c !== void 0 ? _c : (0, uuid_1.v4)(),
        metadata: init.metadata,
    });
    const room = yield SkyWayRoom._Factory(context, init.type, channel);
    return room;
});
/**
 * @description [japanese] 既存のRoomの取得
 */
SkyWayRoom.Find = (context, query, roomType, options) => __awaiter(void 0, void 0, void 0, function* () {
    const plugin = new sfu_bot_1.SfuBotPlugin(options === null || options === void 0 ? void 0 : options.sfu);
    context.registerPlugin(plugin);
    const channel = yield core_1.SkyWayChannel.Find(context, query);
    const room = yield SkyWayRoom._Factory(context, roomType, channel);
    return room;
});
/**
 * @description [japanese] Roomの取得を試み、存在しなければ作成する
 */
SkyWayRoom.FindOrCreate = (context, init) => __awaiter(void 0, void 0, void 0, function* () {
    var _d;
    const plugin = new sfu_bot_1.SfuBotPlugin((_d = init === null || init === void 0 ? void 0 : init.options) === null || _d === void 0 ? void 0 : _d.sfu);
    context.registerPlugin(plugin);
    const channel = yield core_1.SkyWayChannel.FindOrCreate(context, Object.assign({}, init));
    const room = yield SkyWayRoom._Factory(context, init.type, channel);
    return room;
});
SkyWayRoom._Factory = (context, roomType, channel) => __awaiter(void 0, void 0, void 0, function* () {
    switch (roomType) {
        case 'p2p':
            return new p2p_1.P2PRoomImpl(channel);
        case 'sfu':
            return (yield sfu_1.SfuRoomImpl.Create(context, channel));
        default:
            throw (0, core_1.createError)({
                operationName: 'SkyWayRoom._Factory',
                context,
                channel,
                info: errors_1.errors.notImplemented,
                path: log.prefix,
            });
    }
});
exports.roomTypes = ['sfu', 'p2p'];
//# sourceMappingURL=index.js.map
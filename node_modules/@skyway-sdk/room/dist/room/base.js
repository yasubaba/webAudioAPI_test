"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const uuid_1 = require("uuid");
const errors_1 = require("../errors");
const publication_1 = require("../publication");
const subscription_1 = require("../subscription");
const util_1 = require("../util");
const log = new common_1.Logger('packages/room/src/room/base.ts');
/**@internal */
class RoomImpl {
    constructor(type, _channel) {
        this._channel = _channel;
        this._members = {};
        this._publications = {};
        this._subscriptions = {};
        this._context = this._channel._context;
        this._events = new common_1.Events();
        this.onClosed = this._events.make();
        this.onMetadataUpdated = this._events.make();
        this.onMemberJoined = this._events.make();
        this.onMemberLeft = this._events.make();
        this.onMemberListChanged = this._events.make();
        this.onMemberMetadataUpdated = this._events.make();
        this.onStreamPublished = this._events.make();
        this.onStreamUnpublished = this._events.make();
        this.onPublicationListChanged = this._events.make();
        this.onPublicationMetadataUpdated = this._events.make();
        this.onPublicationEnabled = this._events.make();
        this.onPublicationDisabled = this._events.make();
        this.onPublicationSubscribed = this._events.make();
        this.onPublicationUnsubscribed = this._events.make();
        this.onSubscriptionListChanged = this._events.make();
        this.type = type;
        this._channel.onClosed.pipe(this.onClosed);
        this._channel.onMetadataUpdated.pipe(this.onMetadataUpdated);
        this._channel.onMemberMetadataUpdated.add((e) => {
            this._handleOnMemberMetadataUpdate(e);
        });
    }
    /**@private */
    _getMember(id) {
        return this._members[id];
    }
    /**@private */
    _getPublication(id) {
        return this._publications[id];
    }
    /**@private */
    _addPublication(p) {
        const exist = this._publications[p.id];
        if (exist) {
            return exist;
        }
        const publication = new publication_1.RoomPublicationImpl(p, this);
        this._publications[p.id] = publication;
        return publication;
    }
    /**@private */
    _getSubscription(id) {
        return this._subscriptions[id];
    }
    /**@private */
    _addSubscription(s) {
        const exist = this._subscriptions[s.id];
        if (exist) {
            return exist;
        }
        const subscription = new subscription_1.RoomSubscriptionImpl(s, this);
        this._subscriptions[s.id] = subscription;
        return subscription;
    }
    get id() {
        return this._channel.id;
    }
    get name() {
        return this._channel.name;
    }
    get metadata() {
        return this._channel.metadata;
    }
    get state() {
        return this._channel.state;
    }
    get disposed() {
        return this._channel.disposed;
    }
    _handleOnMemberMetadataUpdate(e) {
        const member = this._getMember(e.member.id);
        this.onMemberMetadataUpdated.emit({ member, metadata: e.metadata });
    }
    get members() {
        return Object.values(this._members);
    }
    get publications() {
        return Object.values(this._publications);
    }
    get subscriptions() {
        return Object.values(this._subscriptions);
    }
    joinChannel(roomMemberInit = {}) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state !== 'opened') {
                throw (0, util_1.createError)({
                    operationName: 'RoomImpl.joinChannel',
                    context: this._context,
                    room: this,
                    info: errors_1.errors.roomNotOpened,
                    path: log.prefix,
                });
            }
            roomMemberInit.name = (_a = roomMemberInit.name) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)();
            const local = yield this._channel.join(roomMemberInit);
            if (!this._getMember(local.id)) {
                yield this.onMemberJoined
                    .watch((e) => {
                    return e.member._member.id === local.id;
                }, this._context.config.rtcApi.timeout)
                    .catch((error) => {
                    throw (0, util_1.createError)({
                        operationName: 'RoomImpl.joinChannel',
                        context: this._context,
                        room: this,
                        info: Object.assign(Object.assign({}, errors_1.errors.timeout), { detail: 'RoomImpl onMemberJoined' }),
                        path: log.prefix,
                        error,
                    });
                });
            }
            return local;
        });
    }
    leave(member) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._channel.leave(member._member);
        });
    }
    moveRoom(member) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._channel.moveChannel(member._local);
            member._updateRoom(this);
            return member;
        });
    }
    updateMetadata(metadata) {
        return this._channel.updateMetadata(metadata);
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._channel.close();
        });
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            return this._channel.dispose();
        });
    }
    toJSON() {
        return {
            type: this.type,
            id: this.id,
            name: this.name,
            metadata: this.metadata,
            members: this.members,
            publications: this.publications,
            subscriptions: this.subscriptions,
        };
    }
}
exports.RoomImpl = RoomImpl;
//# sourceMappingURL=base.js.map
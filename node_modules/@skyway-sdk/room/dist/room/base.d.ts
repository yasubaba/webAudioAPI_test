import { Event } from '@skyway-sdk/common';
import { ChannelState, LocalStream, PersonInit, Publication, SkyWayChannelImpl, SubscriptionImpl } from '@skyway-sdk/core';
import { RoomMember } from '../member';
import { LocalRoomMember, LocalRoomMemberImpl } from '../member/local/base';
import { RemoteRoomMember, RemoteRoomMemberImpl } from '../member/remote/base';
import { RoomPublication, RoomPublicationImpl } from '../publication';
import { RoomSubscription, RoomSubscriptionImpl } from '../subscription';
import { RoomType } from '.';
import * as event from './event';
export declare type RoomState = ChannelState;
export interface Room {
    readonly type: RoomType;
    readonly id: string;
    readonly name?: string;
    readonly metadata?: string;
    readonly state: RoomState;
    readonly disposed: boolean;
    /**
     * @description [japanese] Roomが閉じられたときに発火するイベント
     */
    readonly onClosed: Event<event.RoomClosedEvent>;
    /**
     * @description [japanese] RoomのMetadataが更新されたときに発火するイベント
     */
    readonly onMetadataUpdated: Event<event.RoomMetadataUpdatedEvent>;
    /**
     * @description [japanese] RoomにMemberが参加したときに発火するイベント
     */
    readonly onMemberJoined: Event<event.MemberJoinedEvent>;
    /**
     * @description [japanese] RoomからMemberが離脱したときに発火するイベント
     */
    readonly onMemberLeft: Event<event.MemberLeftEvent>;
    /**
     * @description [japanese] Memberの数が変化した時に発火するイベント
     */
    readonly onMemberListChanged: Event<event.ListChangedEvent>;
    /**
     * @description [japanese] Room上のMemberのメタデータが変更されたときに発火するイベント
     */
    readonly onMemberMetadataUpdated: Event<event.MemberMetadataUpdatedEvent>;
    /**
     * @description [japanese] RoomにStreamがPublishされたときに発火するイベント
     */
    readonly onStreamPublished: Event<event.StreamPublishedEvent>;
    /**
     * @description [japanese] RoomからStreamがUnPublishされたときに発火するイベント
     */
    readonly onStreamUnpublished: Event<event.StreamUnpublishedEvent>;
    /**
     * @description [japanese] Publicationの数が変化した時に発火するイベント
     */
    readonly onPublicationListChanged: Event<event.ListChangedEvent>;
    /**
     * @description [japanese] Room上のPublicationのメタデータが変更されたときに発火するイベント
     */
    readonly onPublicationMetadataUpdated: Event<event.PublicationMetadataUpdatedEvent>;
    /**
     * @description [japanese] Publicationが有効化された時に発火するイベント
     */
    readonly onPublicationEnabled: Event<event.PublicationEnabledEvent>;
    /**
     * @description [japanese] Publicationが無効化された時に発火するイベント
     */
    readonly onPublicationDisabled: Event<event.PublicationDisabledEvent>;
    /**
     * @description [japanese] Room上のStreamがSubscribeされたときに発火するイベント
     */
    readonly onPublicationSubscribed: Event<event.StreamSubscribedEvent>;
    /**
     * @description [japanese] Room上のStreamがUnSubscribeされたときに発火するイベント
     */
    readonly onPublicationUnsubscribed: Event<event.StreamUnsubscribedEvent>;
    /**
     * @description [japanese] Subscriptionの数が変化した時に発火するイベント
     */
    readonly onSubscriptionListChanged: Event<event.ListChangedEvent>;
    /**
     * @description [japanese] Roomに参加しているMemberの一覧を取得する
     */
    readonly members: RemoteRoomMember[];
    /**
     * @description [japanese] RoomにPublishされているStreamのPublicationの一覧を取得する
     */
    readonly publications: RoomPublication[];
    /**
     * @description [japanese] Room上のStreamのSubscriptionの一覧を取得する
     */
    readonly subscriptions: RoomSubscription[];
    localRoomMember?: LocalRoomMember;
    /**
     * @description [japanese] RoomにMemberを追加する
     */
    join: (memberInit?: RoomMemberInit) => Promise<LocalRoomMember>;
    /**
     * @description [japanese] RoomからMemberを退室させる
     */
    leave: (member: RoomMember) => Promise<void>;
    /**
     * @description [japanese] 別のRoomのMemberを移動させる
     */
    moveRoom: (member: LocalRoomMember) => Promise<LocalRoomMember>;
    /**
     * @description [japanese] Roomのmetadataを更新する
     */
    updateMetadata: (metadata: string) => Promise<void>;
    /**
     * @description [japanese] Roomを閉じる
     */
    close: () => Promise<void>;
    /**
     * @description [japanese] Roomを閉じずにRoomインスタンスの利用を終了し次のリソースを解放する。
     * - サーバとの通信
     * - イベントリスナー
     * - LocalMemberのインスタンス
     */
    dispose: () => Promise<void>;
}
/**@internal */
export declare abstract class RoomImpl implements Room {
    _channel: SkyWayChannelImpl;
    readonly type: RoomType;
    protected _members: {
        [memberId: string]: RemoteRoomMemberImpl;
    };
    /**@private */
    _getMember(id: string): RemoteRoomMemberImpl;
    protected _publications: {
        [publicationId: string]: RoomPublicationImpl;
    };
    /**@private */
    _getPublication(id: string): RoomPublicationImpl<LocalStream>;
    /**@private */
    _addPublication<T extends LocalStream>(p: Publication): RoomPublication<T>;
    protected _subscriptions: {
        [subscriptionId: string]: RoomSubscriptionImpl;
    };
    /**@private */
    _getSubscription(id: string): RoomSubscriptionImpl<import("@skyway-sdk/core").RemoteStream>;
    /**@private */
    _addSubscription(s: SubscriptionImpl): RoomSubscriptionImpl<import("@skyway-sdk/core").RemoteStream>;
    localRoomMember?: LocalRoomMemberImpl;
    readonly _context: import("@skyway-sdk/core").SkyWayContext;
    private readonly _events;
    readonly onClosed: Event<event.RoomClosedEvent>;
    readonly onMetadataUpdated: Event<event.RoomMetadataUpdatedEvent>;
    readonly onMemberJoined: Event<event.MemberJoinedEvent>;
    readonly onMemberLeft: Event<event.MemberLeftEvent>;
    readonly onMemberListChanged: Event<event.ListChangedEvent>;
    readonly onMemberMetadataUpdated: Event<event.MemberMetadataUpdatedEvent>;
    readonly onStreamPublished: Event<event.StreamPublishedEvent>;
    readonly onStreamUnpublished: Event<event.StreamUnpublishedEvent>;
    readonly onPublicationListChanged: Event<event.ListChangedEvent>;
    readonly onPublicationMetadataUpdated: Event<event.PublicationMetadataUpdatedEvent>;
    readonly onPublicationEnabled: Event<event.PublicationEnabledEvent>;
    readonly onPublicationDisabled: Event<event.PublicationDisabledEvent>;
    readonly onPublicationSubscribed: Event<event.StreamSubscribedEvent>;
    readonly onPublicationUnsubscribed: Event<event.StreamUnsubscribedEvent>;
    readonly onSubscriptionListChanged: Event<event.ListChangedEvent>;
    get id(): string;
    get name(): string;
    get metadata(): string | undefined;
    get state(): ChannelState;
    get disposed(): boolean;
    constructor(type: RoomType, _channel: SkyWayChannelImpl);
    private _handleOnMemberMetadataUpdate;
    protected abstract setChannelState(): void;
    protected abstract setChannelListener(): void;
    get members(): RemoteRoomMember[];
    get publications(): RoomPublication[];
    get subscriptions(): RoomSubscription[];
    protected joinChannel(roomMemberInit?: RoomMemberInit): Promise<import("@skyway-sdk/core").LocalPerson>;
    abstract join(memberInit?: RoomMemberInit): Promise<LocalRoomMember>;
    leave(member: RoomMember): Promise<void>;
    moveRoom(member: LocalRoomMember): Promise<LocalRoomMember>;
    updateMetadata(metadata: string): Promise<void>;
    close(): Promise<void>;
    dispose(): Promise<void>;
    toJSON(): {
        type: "sfu" | "p2p";
        id: string;
        name: string;
        metadata: string | undefined;
        members: RemoteRoomMember[];
        publications: RoomPublication<LocalStream>[];
        subscriptions: RoomSubscription<import("@skyway-sdk/core").RemoteStream>[];
    };
}
export declare type RoomMemberInit = PersonInit;
//# sourceMappingURL=base.d.ts.map
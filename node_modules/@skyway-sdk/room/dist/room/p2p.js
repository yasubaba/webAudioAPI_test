"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.P2PRoomImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const p2p_1 = require("../member/local/p2p");
const base_1 = require("../member/remote/base");
const base_2 = require("./base");
const log = new common_1.Logger('packages/room/src/room/p2p.ts');
/**@internal */
class P2PRoomImpl extends base_2.RoomImpl {
    constructor(channel) {
        super('p2p', channel);
        this.setChannelState();
        this.setChannelListener();
    }
    setChannelState() {
        this._channel.members.forEach((m) => {
            const member = new base_1.RemoteRoomMemberImpl(m, this);
            this._members[m.id] = member;
        });
        this._channel.publications.forEach((p) => {
            this._addPublication(p);
        });
        this._channel.subscriptions.forEach((s) => {
            this._addSubscription(s);
        });
    }
    setChannelListener() {
        this._channel.onMemberJoined.add((e) => this._handleOnMemberJoin(e.member));
        this._channel.onMemberLeft.add((e) => this._handleOnMemberLeft(e.member));
        this._channel.onStreamPublished.add((e) => this._handleOnStreamPublish(e.publication));
        this._channel.onStreamUnpublished.add((e) => this._handleOnStreamUnpublish(e.publication));
        this._channel.onPublicationMetadataUpdated.add((e) => {
            this._handleOnPublicationMetadataUpdate(e.publication);
        });
        this._channel.onPublicationEnabled.add((e) => {
            this._handleOnPublicationEnabled(e.publication);
        });
        this._channel.onPublicationDisabled.add((e) => {
            this._handleOnPublicationDisabled(e.publication);
        });
        this._channel.onPublicationSubscribed.add((e) => this._handleOnStreamSubscribe(e.subscription));
        this._channel.onPublicationUnsubscribed.add((e) => this._handleOnStreamUnsubscribe(e.subscription));
    }
    _handleOnMemberJoin(m) {
        if (this._getMember(m.id)) {
            return;
        }
        const member = new base_1.RemoteRoomMemberImpl(m, this);
        this._members[m.id] = member;
        this.onMemberJoined.emit({ member });
        this.onMemberListChanged.emit({});
    }
    _handleOnMemberLeft(m) {
        const member = this._getMember(m.id);
        delete this._members[m.id];
        member._dispose();
        this.onMemberLeft.emit({ member });
        this.onMemberListChanged.emit({});
    }
    _handleOnStreamPublish(p) {
        if (this._getPublication(p.id)) {
            return;
        }
        const publication = this._addPublication(p);
        this.onStreamPublished.emit({ publication });
        this.onPublicationListChanged.emit({});
    }
    _handleOnStreamUnpublish(p) {
        const publication = this._getPublication(p.id);
        delete this._publications[p.id];
        this.onStreamUnpublished.emit({ publication });
        this.onPublicationListChanged.emit({});
    }
    _handleOnPublicationMetadataUpdate(p) {
        const publication = this._getPublication(p.id);
        this.onPublicationMetadataUpdated.emit({
            publication,
            metadata: publication.metadata,
        });
    }
    _handleOnPublicationEnabled(p) {
        const publication = this._getPublication(p.id);
        this.onPublicationEnabled.emit({ publication });
    }
    _handleOnPublicationDisabled(p) {
        const publication = this._getPublication(p.id);
        this.onPublicationDisabled.emit({ publication });
    }
    _handleOnStreamSubscribe(s) {
        if (this._getSubscription(s.id)) {
            return;
        }
        const subscription = this._addSubscription(s);
        this.onPublicationSubscribed.emit({ subscription });
        this.onSubscriptionListChanged.emit({});
    }
    _handleOnStreamUnsubscribe(s) {
        const subscription = this._getSubscription(s.id);
        delete this._subscriptions[s.id];
        this.onPublicationUnsubscribed.emit({ subscription });
        this.onSubscriptionListChanged.emit({});
    }
    join(memberInit = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const local = yield this.joinChannel(memberInit);
            const localRoomMember = new p2p_1.LocalP2PRoomMemberImpl(local, this);
            log.debug('member joined', memberInit);
            this.localRoomMember = localRoomMember;
            localRoomMember.onLeft.once(() => {
                this.localRoomMember = undefined;
            });
            return localRoomMember;
        });
    }
}
exports.P2PRoomImpl = P2PRoomImpl;
//# sourceMappingURL=p2p.js.map
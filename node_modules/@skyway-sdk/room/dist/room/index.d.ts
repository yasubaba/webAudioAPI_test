import { SkyWayContext } from '@skyway-sdk/core';
import { SfuApiOptions, SfuBotPluginOptions } from '@skyway-sdk/sfu-bot';
import { P2PRoom } from './p2p';
import { SfuRoom } from './sfu';
export { SfuApiOptions, SfuBotPluginOptions };
export declare class SkyWayRoom {
    /**@private */
    constructor();
    /**
     * @description [japanese] Roomの作成
     */
    static Create: <Init extends RoomInit>(context: SkyWayContext, init: Init) => Promise<Init["type"] extends "sfu" ? SfuRoom : P2PRoom>;
    /**
     * @description [japanese] 既存のRoomの取得
     */
    static Find: <Type extends "sfu" | "p2p">(context: SkyWayContext, query: {
        id?: string;
        name?: string;
    }, roomType: Type, options?: (Type extends "sfu" ? SfuRoomOptions : void) | undefined) => Promise<Type extends "sfu" ? SfuRoom : P2PRoom>;
    /**
     * @description [japanese] Roomの取得を試み、存在しなければ作成する
     */
    static FindOrCreate: <Init extends RoomInit>(context: SkyWayContext, init: Init) => Promise<Init["type"] extends "p2p" ? P2PRoom : SfuRoom>;
    private static _Factory;
}
export declare type RoomInit = P2PRoomInit | SfuRoomInit;
export declare type RoomInitBase = {
    name?: string;
    metadata?: string;
    type: RoomType;
};
export declare type P2PRoomInit = RoomInitBase & {
    type: 'p2p';
};
export declare type SfuRoomOptions = {
    sfu: Partial<SfuBotPluginOptions>;
};
export declare type SfuRoomInit = RoomInitBase & {
    type: 'sfu';
    options?: Partial<SfuRoomOptions>;
};
export declare const roomTypes: readonly ["sfu", "p2p"];
export declare type RoomType = (typeof roomTypes)[number];
//# sourceMappingURL=index.d.ts.map
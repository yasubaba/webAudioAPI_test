export declare const roomErrors: {
    readonly invalidParameter: {
        readonly name: "invalidParameter";
        readonly detail: "";
        readonly solution: "";
    };
    readonly timeout: {
        readonly name: "timeout";
        readonly detail: "";
        readonly solution: "";
    };
    readonly internal: {
        readonly name: "internal";
        readonly detail: "";
        readonly solution: "";
    };
    readonly notImplemented: {
        readonly name: "notImplemented";
        readonly detail: "対応していないRoomTypeです";
        readonly solution: "正しいRoomTypeを指定してください";
    };
    readonly roomNotOpened: {
        readonly name: "roomNotOpened";
        readonly detail: "RoomがOpenされていません";
        readonly solution: "Roomの状態を確かめてください";
    };
    readonly subscribeOtherMemberType: {
        readonly name: "subscribeOtherMemberType";
        readonly detail: "RemoteMemberにSubscribe/Unsubscribeさせる場合、対象のMemberのTypeはPersonである必要があります";
        readonly solution: "対象のRemoteMemberが正しいか確認してください";
    };
    readonly sfuRoomNotSupportDataStream: {
        readonly name: "sfuRoomNotSupportDataStream";
        readonly detail: "SFURoomでDataStreamを使うことは出来ません";
        readonly solution: "ありません";
    };
    readonly publicationNotHasOrigin: {
        readonly name: "publicationNotHasOrigin";
        readonly detail: "SfuRoomで操作するPublicationはOriginをもつ必要があります";
        readonly solution: "SfuRoomとP2PRoomを同一のIDで混在させていないか確かめてください";
    };
    readonly notFound: {
        readonly name: "notFound";
        readonly detail: "参照しようとしていたものが見つかりません";
        readonly solution: "参照しようとしたものが存在するか確かめてください";
    };
};
export declare const errors: {
    readonly invalidParameter: {
        readonly name: "invalidParameter";
        readonly detail: "";
        readonly solution: "";
    };
    readonly timeout: {
        readonly name: "timeout";
        readonly detail: "";
        readonly solution: "";
    };
    readonly internal: {
        readonly name: "internal";
        readonly detail: "";
        readonly solution: "";
    };
    readonly notImplemented: {
        readonly name: "notImplemented";
        readonly detail: "対応していないRoomTypeです";
        readonly solution: "正しいRoomTypeを指定してください";
    };
    readonly roomNotOpened: {
        readonly name: "roomNotOpened";
        readonly detail: "RoomがOpenされていません";
        readonly solution: "Roomの状態を確かめてください";
    };
    readonly subscribeOtherMemberType: {
        readonly name: "subscribeOtherMemberType";
        readonly detail: "RemoteMemberにSubscribe/Unsubscribeさせる場合、対象のMemberのTypeはPersonである必要があります";
        readonly solution: "対象のRemoteMemberが正しいか確認してください";
    };
    readonly sfuRoomNotSupportDataStream: {
        readonly name: "sfuRoomNotSupportDataStream";
        readonly detail: "SFURoomでDataStreamを使うことは出来ません";
        readonly solution: "ありません";
    };
    readonly publicationNotHasOrigin: {
        readonly name: "publicationNotHasOrigin";
        readonly detail: "SfuRoomで操作するPublicationはOriginをもつ必要があります";
        readonly solution: "SfuRoomとP2PRoomを同一のIDで混在させていないか確かめてください";
    };
    readonly notFound: {
        readonly name: "notFound";
        readonly detail: "参照しようとしていたものが見つかりません";
        readonly solution: "参照しようとしたものが存在するか確かめてください";
    };
    readonly sfuBotNotInChannel: {
        readonly name: "sfuBotNotInChannel";
        readonly detail: "SfuBotがChannelに存在しません";
        readonly solution: "操作しようとしているSfuBotが正しいか確かめてください";
    };
    readonly maxSubscribersMustNotBeZero: {
        readonly name: "maxSubscribersMustNotBeZero";
        readonly detail: "maxSubscribersは１以上である必要があります";
        readonly solution: "正しい値を入力してください";
    };
    readonly remotePublisherId: {
        readonly name: "remotePublisherId";
        readonly detail: "publisherがremoteのPublicationをForwardingすることはできません";
        readonly solution: "PublicationがLocalでPublishされたものか確かめてください";
    };
    readonly dataStreamNotSupported: {
        readonly name: "dataStreamNotSupported";
        readonly detail: "dataStreamはSFUに対応していません";
        readonly solution: "ありません";
    };
    readonly streamNotExistInPublication: {
        readonly name: "streamNotExistInPublication";
        readonly detail: "PublicationにStreamがありません。RemoteMemberのPublicationのStreamにはアクセスできません";
        readonly solution: "参照しているPublicationが目的のものか確かめてください。";
    };
    readonly invalidPreferredEncoding: {
        readonly name: "invalidPreferredEncoding";
        readonly detail: "preferredEncodingの値が不正です。エンコード設定切り替え機能が使えません";
        readonly solution: "正しい文字列を入力してください";
    };
    readonly invalidEncodings: {
        readonly name: "invalidEncodings";
        readonly detail: "エンコード設定が設定されていません。エンコード設定切り替え機能が使えません";
        readonly solution: "エンコード設定切り替え機能を利用する場合はエンコード設定をしたPublicationをForwardingしてください";
    };
    readonly receiverNotFound: {
        readonly name: "receiverNotFound";
        readonly detail: "SFUはRemoteMemberのSubscriptionを操作できません";
        readonly solution: "SFUでsubscriptionの操作をする際にはLocalPersonがSubscribeしているSubscriptionインスタンスを利用してください";
    };
    readonly consumerNotFound: {
        readonly name: "consumerNotFound";
        readonly detail: "SFUはLocalPersonがUnsubscribeしたSubscriptionを操出来ません";
        readonly solution: "操作対象のSubscriptionが正しいか確かめてください";
    };
    readonly forwardingNotFound: {
        readonly name: "forwardingNotFound";
        readonly detail: "存在しないForwardingを操作しようとしています";
        readonly solution: "対象のForwardingが正しいか確かめてください";
    };
    readonly netWorkError: {
        readonly name: "netWorkError";
        readonly detail: "通信環境に問題があります";
        readonly solution: "ネットワーク接続状況を確認してください";
    };
    readonly confirmSubscriptionFailed: {
        readonly name: "confirmSubscriptionFailed";
        readonly detail: "Forwardingのconsume許可を出すのに失敗しました";
        readonly solution: "ありません";
    };
    readonly invalidRequestParameter: {
        readonly name: "invalidRequestParameter";
        readonly detail: "リクエストの値が不正です";
        readonly solution: "正しい値を入力してください";
    };
    readonly maxSubscriberExceededError: {
        readonly name: "maxSubscribersExceededError";
        readonly detail: "forwardingのmaxSubscribersの制限を超えています。maxSubscribersの値を超えてSubscribeすることはできません";
        readonly solution: "maxSubscribersの範囲内でご利用ください";
    };
    readonly quotaExceededError: {
        readonly name: "quotaExceededError";
        readonly detail: "リソースの制限量を超えてリソースを利用することはできません";
        readonly solution: "リソース制限量の範囲内でご利用ください";
    };
    readonly insufficientPermissions: {
        readonly name: "insufficientPermissions";
        readonly detail: "tokenの権限が不足しています";
        readonly solution: "tokenに必要な権限を付与してください";
    };
    readonly backendError: {
        readonly name: "backendError:";
        readonly detail: "";
        readonly solution: "";
    };
    readonly notAllowedConsumeError: {
        readonly name: "notAllowedConsumeError";
        readonly detail: "ForwardingからのConsume許可がありません";
        readonly solution: "Forwardingしているmemberによる許可操作が必要です";
    };
    readonly missingProperty: {
        readonly name: "missingProperty";
        readonly detail: "";
        readonly solution: "";
    };
    readonly invalidArgumentValue: {
        readonly name: "invalidArgumentValue";
        readonly detail: "引数の値が不正です";
        readonly solution: "正しい値を引数に渡してください";
    };
    readonly invalidContentType: {
        readonly name: "invalidContentType";
        readonly detail: "contentTypeが正しくありません";
        readonly solution: "ContentTypeを確認してください";
    };
    readonly localPersonNotJoinedChannel: {
        readonly name: "localPersonNotJoinedChannel";
        readonly detail: "操作しようとしたPersonがChannelに居ないので、操作できません The person who tried to operate is not in the channel, so the operation is not possible";
        readonly solution: "Channelに居ないPersonを操作している可能性があるので確認してください Please check as you may be operating a person which is not in the channel";
    };
    readonly alreadyLocalPersonExist: {
        readonly name: "alreadyLocalPersonExist";
        readonly detail: "ChannelにすでにLocalPersonが存在します。一つのChannelインスタンスにはLocalPersonが一つしかJoinできません";
        readonly solution: "複数のLocalPersonを用意したい場合は個別にChannelインスタンスを用意してください。";
    };
    readonly alreadySameNameMemberExist: {
        readonly name: "alreadySameNameMemberExist";
        readonly detail: "Channelにすでに同じNameのMemberが存在します";
        readonly solution: "別のNameを使用してください";
    };
    readonly alreadyPublishedStream: {
        readonly name: "alreadyPublishedStream";
        readonly detail: "すでにPublishしたStreamを再度Publishすることはできません You cannot re-publish a stream that has already been published";
        readonly solution: "そのStreamをPublishしたPublicationをUnpublishするか、別の新しいStreamを作ってPublishしてください Unpublish the publication that published that stream, or create another new stream and publish it";
    };
    readonly alreadySubscribedPublication: {
        readonly name: "alreadySubscribedPublication";
        readonly detail: "すでにSubscribeしたPublicationをSubscribeすることはできません";
        readonly solution: "ありません";
    };
    readonly invalidTrackKind: {
        readonly name: "invalidTrackKind";
        readonly detail: "Streamの種類とMediaStreamTrackの種類が一致しません";
        readonly solution: "Streamの種類と同じMediaStreamTrackを利用してください";
    };
    readonly cantMoveSameIdChannel: {
        readonly name: "cantMoveSameIdChannel";
        readonly detail: "moveChannelで同じidのChannelに移動することは出来ません";
        readonly solution: "移動先のChannelが正しいか確かめてください";
    };
    readonly alreadyChannelClosed: {
        readonly name: "alreadyChannelClosed";
        readonly detail: "ChannelがすでにCloseされています";
        readonly solution: "ありません";
    };
    readonly disabledDataStream: {
        readonly name: "disabledDataStream";
        readonly detail: "関連するPublicationがDisableなDataStreamには書き込みできません";
        readonly solution: "関連するPublicationをEnableしてから書き込んでください";
    };
    readonly publicationNotExist: {
        readonly name: "publicationNotExist";
        readonly detail: "channelに該当するPublicationが存在しません";
        readonly solution: "publicationIdが正しいか確かめてください";
    };
    readonly subscriptionNotExist: {
        readonly name: "subscriptionNotExist";
        readonly detail: "channelに該当するSubscriptionが存在しません";
        readonly solution: "subscriptionIdが正しいか確かめてください";
    };
    readonly unknownMemberType: {
        readonly name: "unknownMemberType";
        readonly detail: "対象のMemberのSubtypeのプラグインが登録されていません";
        readonly solution: "対象のMemberのSubtypeのプラグイン(SfuBotなど)をSkyWayContextに登録してください";
    };
    readonly streamNotExistInSubscription: {
        readonly name: "streamNotExistInSubscription";
        readonly detail: "SubscriptionにStreamがありません。RemoteMemberのSubscriptionのStreamにはアクセスできません";
        readonly solution: "参照しているSubscriptionが目的のものか確かめてください。";
    };
    readonly dataStreamNotSupportEncoding: {
        readonly name: "dataStreamNotSupportEncoding";
        readonly detail: "dataStreamはEncode設定の変更に対応していません";
        readonly solution: "ありません";
    };
    readonly correspondingEncodeNotExistForId: {
        readonly name: "correspondingEncodeNotExistForId";
        readonly detail: "指定されたIDに対応するEncode設定が存在しません";
        readonly solution: "正しいEncodingIDを指定してください";
    };
    readonly updateIceParamsFailed: {
        readonly name: "updateIceParamsFailed";
        readonly detail: "iceParamsの更新に失敗しました";
        readonly solution: "ありません";
    };
    readonly invalidElement: {
        readonly name: "invalidElement";
        readonly detail: "渡されたHTML Elementが正しくありません";
        readonly solution: "要求された正しいElementを渡してください";
    };
    readonly connectRtcApiFailed: {
        readonly name: "connectRtcApiFailed";
        readonly detail: "RtcAPIへの接続に失敗しました";
        readonly solution: "インターネットへの接続できているか、もしくはTokenのパラメータが正しいかを確かめてください";
    };
    readonly rtcApiFatalError: {
        readonly name: "rtcApiFatalError";
        readonly detail: "RtcAPIの回復不能なエラーです。サーバー側の問題の可能性があります";
        readonly solution: "インターネットへの接続が出来ているかを確かめてください";
    };
    readonly invalidExpireTokenValue: {
        readonly name: "invalidExpireTokenValue";
        readonly detail: "tokenのExpire時刻が不正です";
        readonly solution: "正しい時刻を指定してください";
    };
    readonly invalidRemindExpireTokenValue: {
        readonly name: "invalidRemindExpireTokenValue";
        readonly detail: "tokenのExpireをリマインドする時間の値が不正です";
        readonly solution: "正しい時間を指定してください";
    };
    readonly invalidTokenAppId: {
        readonly name: "invalidTokenAppId";
        readonly detail: "tokenのappIdが正しくありません";
        readonly solution: "正しいappIdを含むTokenを使用してください";
    };
    readonly mediaDevicesNotFound: {
        readonly name: "mediaDevicesNotFound";
        readonly detail: "navigator.mediaDevicesがみつかりません";
        readonly solution: "アプリケーションをhttps,localhost,127.0.0.1のいずれかの環境で動作させてください";
    };
    readonly canNotUseReplaceStream: {
        readonly name: "canNotUseReplaceStream";
        readonly detail: "remoteのPublicationからreplaceStreamできません";
        readonly solution: "対象のPublicationがLocalのものか確認してください";
    };
    readonly canNotEnableRemotePublication: {
        readonly name: "canNotEnableRemotePublication";
        readonly detail: "remoteのPublicationをenableすることはできません";
        readonly solution: "対象のPublicationがLocalのものか確認してください";
    };
};
//# sourceMappingURL=errors.d.ts.map
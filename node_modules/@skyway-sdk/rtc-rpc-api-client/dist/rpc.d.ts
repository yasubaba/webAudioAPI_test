/// <reference types="ws" />
import { SkyWayError } from '@skyway-sdk/common';
import WebSocket from 'isomorphic-ws';
export declare class RPC {
    private readonly _id;
    /**@private */
    _ws: WebSocket;
    closed: boolean;
    negotiated: boolean;
    private _reconnecting;
    set reconnecting(b: boolean);
    get reconnecting(): boolean;
    private _pendingRequests;
    private readonly _events;
    private readonly _onMessage;
    readonly onNotify: import("@skyway-sdk/common").Event<{
        method: string;
        params: object;
    }>;
    readonly onFatalError: import("@skyway-sdk/common").Event<SkyWayError<Record<string, any>>>;
    readonly onDisconnected: import("@skyway-sdk/common").Event<void>;
    readonly onClosed: import("@skyway-sdk/common").Event<void>;
    connect({ domain, token, secure, }: {
        domain: string;
        token: string;
        secure: boolean;
    }): Promise<void>;
    close(): void;
    resolvePendingRequests(): void;
    private _send;
    /**
     * @throws {@link SkyWayError}
     */
    request<Result extends object>(method: string, params: {
        [key: string]: any;
        appId?: string;
        authToken: string;
    }): Promise<object & Result>;
    notify(method: string, params: object): Promise<void>;
    batch<Result extends object>(requests: {
        method: string;
        params: object;
    }[]): Promise<(ResponseMessage & {
        result: Result;
    })[]>;
}
interface ResponseMessage {
    jsonrpc: '2.0';
    result: object;
    error?: ResponseError;
    id: string;
}
export interface ResponseError {
    code: number;
    message: string;
    data: object;
}
export {};
//# sourceMappingURL=rpc.d.ts.map
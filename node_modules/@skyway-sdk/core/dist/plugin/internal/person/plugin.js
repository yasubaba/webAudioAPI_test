"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerPersonPlugin = exports.PersonPlugin = void 0;
const plugin_1 = require("../../interface/plugin");
const messageBuffer_1 = require("./connection/messageBuffer");
const member_1 = require("./member");
class PersonPlugin extends plugin_1.SkyWayPlugin {
    constructor() {
        super(...arguments);
        this.subtype = 'person';
        this._messageBuffers = {};
        this._whenCreateLocalPerson = (person) => __awaiter(this, void 0, void 0, function* () {
            if (person._signaling) {
                this._messageBuffers[person.id] = new messageBuffer_1.MessageBuffer(person._signaling);
            }
        });
        this._whenDisposeLocalPerson = (person) => __awaiter(this, void 0, void 0, function* () {
            const messageBuffer = this._messageBuffers[person.id];
            if (messageBuffer) {
                messageBuffer.close();
                delete this._messageBuffers[person.id];
            }
        });
        this._createRemoteMember = (channel, memberDto) => {
            const person = new member_1.RemotePersonImpl(Object.assign(Object.assign({}, this._context), { context: this._context, channel, metadata: memberDto.metadata, id: memberDto.id, name: memberDto.name, plugin: this }));
            return person;
        };
    }
}
exports.PersonPlugin = PersonPlugin;
const registerPersonPlugin = (context) => {
    const plugin = new PersonPlugin();
    context.registerPlugin(plugin);
    return plugin;
};
exports.registerPersonPlugin = registerPersonPlugin;
//# sourceMappingURL=plugin.js.map
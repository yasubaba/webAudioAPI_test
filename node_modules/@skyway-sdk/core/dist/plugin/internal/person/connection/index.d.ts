import { Event } from '@skyway-sdk/common';
import { SkyWayContext } from '../../../../context';
import { AnalyticsSession } from '../../../../external/analytics';
import { IceManager } from '../../../../external/ice';
import { SignalingSession } from '../../../../external/signaling';
import { LocalPersonImpl } from '../../../../member/localPerson';
import { RemoteMember } from '../../../../member/remoteMember';
import { Publication, PublicationImpl } from '../../../../publication';
import { Subscription, SubscriptionImpl } from '../../../../subscription';
import { SkyWayConnection } from '../../../interface/connection';
import { Receiver } from './receiver';
import { Sender } from './sender';
/**@internal */
export declare class P2PConnection implements SkyWayConnection {
    private readonly _iceManager;
    private readonly _signaling;
    private readonly _analytics;
    private readonly _context;
    readonly channelId: string;
    readonly localPerson: LocalPersonImpl;
    readonly remoteMember: RemoteMember;
    readonly id: string;
    readonly type = "p2p";
    readonly onDisconnect: Event<void>;
    readonly onClose: Event<void>;
    closed: boolean;
    disconnected: boolean;
    private _log;
    private _pubsubQueue;
    private sendSubscriptionStatsReportTimer;
    private _waitingSendSubscriptionStatsReportsFromPublish;
    private _waitingSendSubscriptionStatsReportsFromSubscribe;
    readonly sender: Sender;
    readonly receiver: Receiver;
    /**@internal */
    constructor(_iceManager: IceManager, _signaling: SignalingSession, _analytics: AnalyticsSession | undefined, _context: SkyWayContext, channelId: string, localPerson: LocalPersonImpl, remoteMember: RemoteMember);
    /**
     * @internal
     * @throws {SkyWayError}
     */
    startPublishing(publication: PublicationImpl, subscriptionId: string): Promise<void>;
    /**@internal */
    stopPublishing(publication: Publication): Promise<void>;
    /**@internal */
    startSubscribing(subscription: SubscriptionImpl): Promise<void>;
    /**@internal */
    stopSubscribing(subscription: Subscription): Promise<void>;
    private _closeIfNeeded;
    getStats(content: Subscription | Publication): Promise<RTCStatsReport>;
    /**@internal */
    close({ reason }?: {
        reason?: string;
    }): void;
    private startSendSubscriptionStatsReportTimer;
}
declare const p2pMessageKinds: readonly ["senderProduceMessage", "senderUnproduceMessage", "receiverAnswerMessage", "iceCandidateMessage", "senderRestartIceMessage", "ping"];
/**@internal */
export declare type P2PMessageKind = (typeof p2pMessageKinds)[number];
/**@internal */
export declare type P2PMessage = {
    kind: P2PMessageKind;
    payload: any;
};
export {};
//# sourceMappingURL=index.d.ts.map
import { Event, SkyWayError } from '@skyway-sdk/common';
import { SkyWayContext } from '../../../../context';
import { AnalyticsSession } from '../../../../external/analytics';
import { IceManager } from '../../../../external/ice';
import { SignalingSession } from '../../../../external/signaling';
import { RemoteStream } from '../../../../media/stream';
import { LocalPersonImpl } from '../../../../member/localPerson';
import { RemoteMember } from '../../../../member/remoteMember';
import { SubscriptionImpl } from '../../../../subscription';
import { TransportConnectionState } from '../../../interface';
import { P2PMessage } from '.';
import { Peer } from './peer';
export declare class Receiver extends Peer {
    readonly id: string;
    readonly onConnectionStateChanged: Event<TransportConnectionState>;
    readonly onStreamAdded: Event<{
        publicationId: string;
        stream: RemoteStream;
    }>;
    readonly onError: Event<SkyWayError<Record<string, any>>>;
    private _connectionState;
    private _publicationInfo;
    streams: {
        [publicationId: string]: RemoteStream;
    };
    private _subscriptions;
    private readonly _promiseQueue;
    private _disposer;
    private _log;
    constructor(context: SkyWayContext, iceManager: IceManager, signaling: SignalingSession, analytics: AnalyticsSession | undefined, localPerson: LocalPersonImpl, endpoint: RemoteMember);
    private _setConnectionState;
    private _setupTransportAccessForStream;
    private _getCodecFromSdp;
    get hasMedia(): boolean;
    close(): void;
    add(subscription: SubscriptionImpl): void;
    remove(subscriptionId: string): void;
    /**@throws {SkyWayError} */
    private _validateRemoteOffer;
    private get isWrongSignalingState();
    /**@throws {SkyWayError} */
    private _handleSenderProduce;
    /**@throws {SkyWayError} */
    private _handleSenderUnproduce;
    /**@throws {SkyWayError} */
    private _handleSenderRestartIce;
    private sendAnswer;
    get subscriptions(): {
        [subscriptionId: string]: SubscriptionImpl<RemoteStream>;
    };
}
export interface ReceiverAnswerMessage extends P2PMessage {
    kind: 'receiverAnswerMessage';
    payload: {
        sdp: RTCSessionDescriptionInit;
    };
}
//# sourceMappingURL=receiver.d.ts.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteStreamBase = void 0;
const common_1 = require("@skyway-sdk/common");
class RemoteStreamBase {
    /**@internal */
    constructor(id, contentType) {
        this.id = id;
        this.contentType = contentType;
        this.side = 'remote';
        /**
         * @deprecated
         * @use Subscription.onConnectionStateChanged
         * @description [japanese] メディア通信の状態が変化した時に発火するイベント
         */
        this.onConnectionStateChanged = new common_1.Event();
        /**@internal */
        this._onConnectionStateChanged = new common_1.Event();
        this._connectionState = 'new';
        /**@internal */
        this._getTransport = () => undefined;
        /**
         * @deprecated
         * @use Subscription.getStats
         */
        this.getStats = () => {
            return this._getStats();
        };
        /**@internal */
        this._getStats = () => __awaiter(this, void 0, void 0, function* () { return []; });
        this._onConnectionStateChanged.pipe(this.onConnectionStateChanged);
    }
    /**@internal */
    _setConnectionState(state) {
        if (this._connectionState === state)
            return;
        this._connectionState = state;
        this._onConnectionStateChanged.emit(state);
    }
    /**
     * @deprecated
     * @use Subscription.getRTCPeerConnection
     */
    getRTCPeerConnection() {
        return this._getRTCPeerConnection();
    }
    /**@internal */
    _getRTCPeerConnection() {
        var _a;
        return (_a = this._getTransport()) === null || _a === void 0 ? void 0 : _a.rtcPeerConnection;
    }
    /**
     * @deprecated
     * @use Subscription.getConnectionState
     */
    getConnectionState() {
        return this._getConnectionState();
    }
    /**@internal */
    _getConnectionState() {
        return this._connectionState;
    }
    /**@internal */
    toJSON() {
        return {
            contentType: this.contentType,
            id: this.id,
            codec: this.codec,
            side: this.side,
        };
    }
}
exports.RemoteStreamBase = RemoteStreamBase;
//# sourceMappingURL=base.js.map
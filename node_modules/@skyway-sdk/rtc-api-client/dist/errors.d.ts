export declare const errors: {
    readonly invalidParameter: {
        readonly name: "invalidParameter";
        readonly detail: "";
        readonly solution: "";
    };
    readonly notFound: {
        readonly name: "notFound";
        readonly detail: "";
        readonly solution: "";
    };
    readonly timeout: {
        readonly name: "timeout";
        readonly detail: "";
        readonly solution: "";
    };
    readonly internalError: {
        readonly name: "internalError";
        readonly detail: "";
        readonly solution: "";
    };
    readonly invalidRequestParameter: {
        readonly name: "invalidRequestParameter";
        readonly detail: "リクエストのパラメーターが正しくありません";
        readonly solution: "API仕様を確認し正しい値を入力してください";
    };
    readonly insufficientPermissions: {
        readonly name: "insufficientPermissions";
        readonly detail: "tokenの権限が不足しています Token permissions are insufficient";
        readonly solution: "Tokenに必要な権限を加えてください Add the necessary permissions to the Token";
    };
    readonly publicationNestedTooMuch: {
        readonly name: "publicationNestedTooMuch";
        readonly detail: "originが設定されているPublicationをPublicationのoriginに指定することは出来ません It is not possible to specify the origin of a publication for which Origin has been set";
        readonly solution: "仕様上の制約なので解決法はありません There is no solution because it is a specification limitation";
    };
    readonly channelNotFound: {
        readonly name: "channelNotFound";
        readonly detail: "参照しようとしたchannelは存在しません The channel you tried to reference does not exist.";
        readonly solution: "channelIdやchannelNameが正しいか確かめてください Make sure that the Channel id and channel name are correct.";
    };
    readonly memberNotFound: {
        readonly name: "memberNotFound";
        readonly detail: "参照しようとしたMemberは存在しません The member you tried to reference does not exist.";
        readonly solution: "memberIdやmemberNameが正しいか確かめてください Make sure that the member id and member name is correct.";
    };
    readonly publicationNotFound: {
        readonly name: "publicationNotFound";
        readonly detail: "参照しようとしたPublicationは存在しません The Publication you tried to reference does not exist.";
        readonly solution: "publicationIdが正しいか確かめてください Make sure that the publication id is correct.";
    };
    readonly subscriptionNotFound: {
        readonly name: "subscriptionNotFound";
        readonly detail: "参照しようとしたSubscriptionは存在しません The Subscription you tried to reference does not exist.";
        readonly solution: "subscriptionIdが正しいか確かめてください Make sure that the subscription id is correct.";
    };
    readonly operationConflicted: {
        readonly name: "operationConflicted";
        readonly detail: "与えられた名前のチャネルは、今までの競合する要求によって、すでに作成されています The channel with the given name has already been created by a conflicting request up to now";
        readonly solution: "別の名前を使ってchannelを作成してください";
    };
    readonly channelNameDuplicated: {
        readonly name: "channelNameDuplicated";
        readonly detail: "その名前のChannelはすでに存在します A channel with that name already exists";
        readonly solution: "別の名前を使ってchannelを作成してください";
    };
    readonly memberNameDuplicated: {
        readonly name: "memberNameDuplicated";
        readonly detail: "その名前のMemberはすでに存在します A member with that name already exists";
        readonly solution: "別の名前を使ってmemberを作成してください";
    };
    readonly subscriptionAlreadyExists: {
        readonly name: "subscriptionAlreadyExists";
        readonly detail: "PublicationはすでにSubscribeされています";
        readonly solution: "publicationIdが正しいか確かめてください";
    };
    readonly rateLimitExceeded: {
        readonly name: "rateLimitExceeded";
        readonly detail: "リソースを規定仕様以上に消費しています";
        readonly solution: "リソースの消費量を減らしてください";
    };
    readonly authTokenExpired: {
        readonly name: "authTokenExpired";
        readonly detail: "AuthTokenが期限切れです";
        readonly solution: "適切なExpを設定したAuthTokenを使用してください";
    };
    readonly serverBusy: {
        readonly name: "serverBusy";
        readonly detail: "サービス側の問題です";
        readonly solution: "しばらく時間を置いて再試行してください";
    };
    readonly connectionDisconnected: {
        readonly name: "connectionDisconnected";
        readonly detail: "";
        readonly solution: "";
    };
    readonly websocketConnectionFailure: {
        readonly name: "connectionFailure";
        readonly detail: "サーバへの接続に失敗しました";
        readonly solution: "ネットワーク接続状況を確認してください";
    };
    readonly rpcResponseError: {
        readonly name: "rpcResponseError";
        readonly detail: "";
        readonly solution: "";
        readonly error: import("@skyway-sdk/rtc-rpc-api-client").ResponseError;
    };
    readonly onClosedWhileRequesting: {
        readonly name: "onClosedWhileRequesting";
        readonly detail: "request中にクライアントが終了されました";
        readonly solution: "リクエストの完了を確認してからクライアントを終了させてください";
    };
    readonly failedToConnectRtcAPI: {
        readonly name: "failedToConnectRtcAPI";
        readonly detail: "rtc-api serverへの接続に失敗しました";
        readonly solution: "インターネット接続状況とTokenの内容が正しいかを確かめてください";
    };
    readonly failedToUpdateMemberTTL: {
        readonly name: "failedToUpdateMemberTTL";
        readonly detail: "updateMemberTTLを再試行しましたが、失敗しました";
        readonly solution: "インターネット接続状況を確認してください";
    };
};
export declare type ErrorName = keyof typeof errors;
export declare const ErrorNames: ("timeout" | "invalidParameter" | "notFound" | "internalError" | "invalidRequestParameter" | "insufficientPermissions" | "publicationNestedTooMuch" | "channelNotFound" | "memberNotFound" | "publicationNotFound" | "subscriptionNotFound" | "operationConflicted" | "channelNameDuplicated" | "memberNameDuplicated" | "subscriptionAlreadyExists" | "rateLimitExceeded" | "authTokenExpired" | "serverBusy" | "connectionDisconnected" | "websocketConnectionFailure" | "rpcResponseError" | "onClosedWhileRequesting" | "failedToConnectRtcAPI" | "failedToUpdateMemberTTL")[];
//# sourceMappingURL=errors.d.ts.map
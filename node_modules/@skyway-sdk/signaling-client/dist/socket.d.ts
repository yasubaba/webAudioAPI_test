import { ClientEvent } from './clientEvent';
import { Event } from './utils/event';
import { Logger } from './utils/logger';
declare const ServerEventType: readonly ["open", "sendRequestSignalingMessage", "sendResponseSignalingMessage", "acknowledge"];
declare type ServerEventType = (typeof ServerEventType)[number];
export declare type ServerEvent = {
    event: ServerEventType;
    eventId: string;
    payload: Record<string, unknown> | undefined;
};
export declare type ConnectionState = 'connected' | 'reconnecting' | 'closed';
export declare type SocketParams = {
    sessionEndpoint: string;
    channelId: string;
    channelName?: string;
    memberId: string;
    memberName?: string;
    token: string;
    logger: Logger;
};
export declare class Socket {
    private _sessionEndpoint;
    private readonly _channelId;
    private readonly _channelName?;
    private readonly _memberId;
    private readonly _memberName?;
    private _token;
    private _logger;
    private _isOpen;
    private _isDestroyed;
    private _reconnectCount;
    private _ws;
    connectionState: ConnectionState;
    readonly onConnectionStateChanged: Event<ConnectionState>;
    readonly onOpened: Event<void>;
    readonly onEventReceived: Event<ServerEvent>;
    readonly onConnectionFailed: Event<void>;
    private _reconnectTimer;
    constructor({ channelId, channelName, memberId, memberName, sessionEndpoint, token, logger }: SocketParams);
    private _setConnectionState;
    private _connect;
    updateAuthToken(token: string): void;
    reconnect(): void;
    destroy(): void;
    send(clientEvent: ClientEvent): Promise<void>;
    private _messageHandler;
}
export {};
//# sourceMappingURL=socket.d.ts.map
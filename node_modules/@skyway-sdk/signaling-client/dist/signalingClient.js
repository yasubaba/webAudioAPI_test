"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignalingClient = void 0;
const uuid_1 = require("uuid");
const clientEvent_1 = require("./clientEvent");
const payloadTypes_1 = require("./payloadTypes");
const socket_1 = require("./socket");
const event_1 = require("./utils/event");
const SIGNALING_SERVER_DOMAIN = 'signaling.skyway.ntt.com';
const API_VERSION = 'v1';
class SignalingClient {
    constructor({ token, channelId, channelName, memberId, memberName }, options) {
        this.onConnectionStateChanged = new event_1.Event();
        this.onConnectionFailed = new event_1.Event();
        this.onRequested = new event_1.Event();
        this._connectivityCheckTimers = new Map();
        this._responseCallbacks = new Map();
        this._acknowledgeCallbacks = new Map();
        this._token = token;
        this._channelId = channelId;
        this._channelName = channelName;
        this._memberId = memberId;
        this._memberName = memberName;
        const defaultOptions = {
            connectivityCheckIntervalSec: 30,
            signalingServerDomain: SIGNALING_SERVER_DOMAIN,
            secure: true,
            logger: {
                debug: (message) => {
                    console.debug(message);
                },
                error: (error) => {
                    console.error(error);
                },
            },
        };
        this._options = Object.assign({}, defaultOptions, options !== null && options !== void 0 ? options : {});
        this._logger = this._options.logger;
        this._logger.debug(`Created instance with the options: ${this._options}`);
    }
    get connectionState() {
        var _a, _b;
        return (_b = (_a = this._socket) === null || _a === void 0 ? void 0 : _a.connectionState) !== null && _b !== void 0 ? _b : 'closed';
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            const WSProtocol = this._options.secure ? 'wss' : 'ws';
            const signalingServerDomain = this._options.signalingServerDomain || SIGNALING_SERVER_DOMAIN;
            this._socket = new socket_1.Socket({
                sessionEndpoint: `${WSProtocol}://${signalingServerDomain}/${API_VERSION}/ws`,
                channelId: this._channelId,
                channelName: this._channelName,
                memberId: this._memberId,
                memberName: this._memberName,
                token: this._token,
                logger: this._logger,
            });
            this._socket.onEventReceived.addListener((data) => {
                try {
                    this._eventReceivedHandler(data);
                }
                catch (error) {
                    this._logger.error('in _eventReceivedHandler', error);
                }
            });
            this._socket.onConnectionFailed.addListener(() => {
                this.onConnectionFailed.emit();
            });
            this._socket.onConnectionStateChanged.addListener((state) => {
                this.onConnectionStateChanged.emit(state);
            });
            yield this._socket.onOpened.asPromise(15 * 1000);
            this._startConnectivityCheck();
        });
    }
    disconnect() {
        var _a;
        this._stopConnectivityCheck();
        (_a = this._socket) === null || _a === void 0 ? void 0 : _a.destroy();
        this._socket = undefined;
        this._responseCallbacks.clear();
        this._acknowledgeCallbacks.clear();
    }
    _startConnectivityCheck() {
        if (this._connectivityCheckInterval) {
            this._logger.debug('connectivity check timer is already set');
            return;
        }
        this._connectivityCheckInterval = setInterval(() => {
            var _a;
            const clientEvent = new clientEvent_1.ClientEvent('checkConnectivity');
            (_a = this._socket) === null || _a === void 0 ? void 0 : _a.send(clientEvent).catch(() => {
                this._acknowledgeCallbacks.delete(clientEvent.eventId);
            });
            this._connectivityCheckTimers.set(clientEvent.eventId, setTimeout(() => {
                var _a;
                this._acknowledgeCallbacks.delete(clientEvent.eventId);
                (_a = this._socket) === null || _a === void 0 ? void 0 : _a.reconnect();
                this._logger.debug('connectivity check timer is expired');
            }, 5 * 1000));
            this._setAcknowledgeCallback(clientEvent.eventId, (data) => {
                var _a;
                const timer = this._connectivityCheckTimers.get(clientEvent.eventId);
                if (timer) {
                    clearTimeout(timer);
                    this._connectivityCheckTimers.delete(clientEvent.eventId);
                }
                if (!data.ok) {
                    (_a = this._socket) === null || _a === void 0 ? void 0 : _a.reconnect();
                    this._logger.debug('connectivity check response from server was not ok');
                }
            });
        }, this._options.connectivityCheckIntervalSec * 1000);
        this._logger.debug('Started connectivity check timer');
    }
    _stopConnectivityCheck() {
        if (!this._connectivityCheckInterval) {
            this._logger.debug('connectivity check timer is not set');
            return;
        }
        clearInterval(this._connectivityCheckInterval);
        this._connectivityCheckInterval = undefined;
        this._logger.debug('Stopped connectivity check timer');
        for (const [_, timer] of this._connectivityCheckTimers) {
            clearTimeout(timer);
        }
        this._connectivityCheckTimers.clear();
    }
    request(target, data, timeoutSec = 10) {
        validateTarget(target);
        validateData(data);
        return new Promise((resolve, reject) => {
            if (this._socket === undefined) {
                reject(new Error('websocket is not connected'));
                return;
            }
            const payload = {
                dst: target,
                data,
            };
            const clientEvent = new clientEvent_1.ClientEvent('sendRequestSignalingMessage', payload);
            const timer = setTimeout(() => {
                this._acknowledgeCallbacks.delete(clientEvent.eventId);
                reject(new Error('request timeout'));
            }, timeoutSec * 1000);
            this._setResponseCallback(clientEvent.eventId, (data) => {
                clearTimeout(timer);
                resolve(data);
            });
            this._setAcknowledgeCallback(clientEvent.eventId, (data) => {
                if (!data.ok) {
                    clearTimeout(timer);
                    reject(data);
                }
            });
            this._socket.send(clientEvent).catch((err) => {
                this._acknowledgeCallbacks.delete(clientEvent.eventId);
                clearTimeout(timer);
                reject(err);
            });
        });
    }
    _response(target, requestEventId, data, timeoutSec) {
        return new Promise((resolve, reject) => {
            validateData(data);
            if (this._socket === undefined) {
                reject(new Error('websocket is not connected'));
                return;
            }
            const payload = {
                dst: target,
                requestEventId,
                data,
            };
            const clientEvent = new clientEvent_1.ClientEvent('sendResponseSignalingMessage', payload);
            const timer = setTimeout(() => {
                this._acknowledgeCallbacks.delete(clientEvent.eventId);
                reject(new Error('response timeout'));
            }, timeoutSec * 1000);
            this._setAcknowledgeCallback(clientEvent.eventId, (data) => {
                clearTimeout(timer);
                if (data.ok) {
                    resolve();
                }
                else {
                    reject(data);
                }
            });
            this._socket.send(clientEvent).catch((err) => {
                this._acknowledgeCallbacks.delete(clientEvent.eventId);
                clearTimeout(timer);
                reject(err);
            });
        });
    }
    updateSkyWayAuthToken(token, timeoutSec = 10) {
        return new Promise((resolve, reject) => {
            if (this._socket === undefined) {
                reject(new Error('websocket is not connected'));
                return;
            }
            const payload = {
                token,
            };
            const clientEvent = new clientEvent_1.ClientEvent('updateSkyWayAuthToken', payload);
            const timer = setTimeout(() => {
                this._acknowledgeCallbacks.delete(clientEvent.eventId);
                reject(new Error('updateSkyWayAuthToken timeout'));
            }, timeoutSec * 1000);
            this._setAcknowledgeCallback(clientEvent.eventId, (data) => {
                clearTimeout(timer);
                if (data.ok) {
                    if (this._socket === undefined) {
                        reject(new Error('websocket is not connected'));
                        return;
                    }
                    this._socket.updateAuthToken(token);
                    resolve();
                }
                else {
                    reject(data);
                }
            });
            this._socket.send(clientEvent).catch((err) => {
                this._acknowledgeCallbacks.delete(clientEvent.eventId);
                clearTimeout(timer);
                reject(err);
            });
        });
    }
    _eventReceivedHandler(data) {
        switch (data.event) {
            case 'acknowledge':
                this._acknowledgeHandler(data.payload);
                break;
            case 'sendRequestSignalingMessage':
                this._eventMessageRequestHandler(data.payload);
                break;
            case 'sendResponseSignalingMessage':
                this._eventMessageResponseHandler(data.payload);
                break;
            case 'open':
                break; // nop
            default: {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const _ = data.event;
                this._logger.debug(`Unknown event: ${data.event}`);
            }
        }
    }
    _acknowledgeHandler(payload) {
        if (!(0, payloadTypes_1.isAcknowledgePayload)(payload)) {
            throw new Error('Invalid payload');
        }
        const { eventId } = payload;
        if (!this._acknowledgeCallbacks.has(eventId)) {
            throw new Error(`acknowledge event has unknown eventId: ${eventId}`);
        }
        const callback = this._acknowledgeCallbacks.get(eventId);
        if (callback) {
            this._acknowledgeCallbacks.delete(eventId);
            callback(payload);
        }
    }
    _eventMessageRequestHandler(payload) {
        if (!(0, payloadTypes_1.isMessagePayload)(payload)) {
            throw new Error('Invalid payload');
        }
        if (!payload.requestEventId) {
            throw new Error('Invalid payload');
        }
        const src = payload.src;
        const requestEventId = payload.requestEventId;
        const reply = (data, timeout = 10) => __awaiter(this, void 0, void 0, function* () {
            yield this._response(src, requestEventId, data, timeout);
        });
        this.onRequested.emit({
            data: payload.data,
            reply: reply,
            requestEventId: payload.requestEventId,
            src: payload.src,
        });
    }
    _eventMessageResponseHandler(payload) {
        if (!(0, payloadTypes_1.isMessagePayload)(payload)) {
            throw new Error('Invalid payload');
        }
        if (!payload.requestEventId || !this._responseCallbacks.has(payload.requestEventId)) {
            throw new Error(`received response has unknown eventId: ${payload.requestEventId}`);
        }
        const callback = this._responseCallbacks.get(payload.requestEventId);
        if (callback) {
            this._responseCallbacks.delete(payload.requestEventId);
            callback(payload.data);
        }
    }
    _setResponseCallback(eventId, callback) {
        this._responseCallbacks.set(eventId, callback);
    }
    _setAcknowledgeCallback(eventId, callback) {
        this._acknowledgeCallbacks.set(eventId, callback);
    }
}
exports.SignalingClient = SignalingClient;
function validateData(data) {
    if (!data || typeof data !== 'object') {
        throw new Error('the type of data must be object');
    }
}
function validateTarget(target) {
    if (!(0, payloadTypes_1.isMember)(target)) {
        throw new Error('the type of target must be {id: string, name: string}');
    }
    if (!(0, uuid_1.validate)(target.id)) {
        throw new Error('the type of target.id must be uuid format');
    }
}
//# sourceMappingURL=signalingClient.js.map
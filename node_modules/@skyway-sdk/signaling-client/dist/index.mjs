var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __pow = Math.pow;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// bundler/shims/process.js
var init_process = __esm({
  "bundler/shims/process.js"() {
    "use strict";
  }
});

// ../../node_modules/isomorphic-ws/browser.js
var require_browser = __commonJS({
  "../../node_modules/isomorphic-ws/browser.js"(exports, module) {
    init_process();
    var ws = null;
    if (typeof WebSocket !== "undefined") {
      ws = WebSocket;
    } else if (typeof MozWebSocket !== "undefined") {
      ws = MozWebSocket;
    } else if (typeof global !== "undefined") {
      ws = global.WebSocket || global.MozWebSocket;
    } else if (typeof window !== "undefined") {
      ws = window.WebSocket || window.MozWebSocket;
    } else if (typeof self !== "undefined") {
      ws = self.WebSocket || self.MozWebSocket;
    }
    module.exports = ws;
  }
});

// src/index.ts
init_process();

// src/signalingClient.ts
init_process();

// node_modules/uuid/dist/esm-browser/index.js
init_process();

// node_modules/uuid/dist/esm-browser/rng.js
init_process();
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
init_process();

// node_modules/uuid/dist/esm-browser/validate.js
init_process();

// node_modules/uuid/dist/esm-browser/regex.js
init_process();
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/v4.js
init_process();

// node_modules/uuid/dist/esm-browser/native.js
init_process();
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/clientEvent.ts
init_process();
var MAX_PAYLOAD_LENGTH = 20480;
var ClientEvent = class {
  constructor(event, payload = {}) {
    this.event = event;
    this.payload = payload;
    this.eventId = v4_default();
    this.data = JSON.stringify({ event: this.event, eventId: this.eventId, payload: this.payload });
    if (this.data.length > MAX_PAYLOAD_LENGTH) {
      throw new Error("payload size exceeds the upper limit");
    }
  }
};

// src/payloadTypes.ts
init_process();
var AcknowledgeReason = [
  "rateLimitExceeded",
  "targetNotFound",
  "payloadLengthExceeded",
  "invalidPayload",
  "unknown",
  "parameterError",
  "permissionError"
];
function isMessagePayload(payload) {
  if (!payload || typeof payload !== "object")
    return false;
  if (!isMember(payload.src))
    return false;
  if (!payload.data || typeof payload.data !== "object")
    return false;
  return true;
}
function isAcknowledgePayload(payload) {
  if (!payload || typeof payload !== "object")
    return false;
  if (typeof payload.eventId !== "string")
    return false;
  if (typeof payload.ok !== "boolean")
    return false;
  if (typeof payload.reason !== "undefined" && (typeof payload.reason !== "string" || !AcknowledgeReason.includes(payload.reason)))
    return false;
  return true;
}
function isMember(arg) {
  if (arg === void 0 || Array.isArray(arg))
    return false;
  if (typeof arg !== "object")
    return false;
  if (typeof arg.id !== "string")
    return false;
  if (typeof arg.name !== "undefined" && typeof arg.name !== "string")
    return false;
  return true;
}

// src/socket.ts
init_process();
var import_isomorphic_ws = __toESM(require_browser());

// src/utils/event.ts
init_process();
var Event = class {
  constructor() {
    this._listeners = /* @__PURE__ */ new Map();
    this._listenerIndex = 0;
    this.emit = (arg) => {
      this._listeners.forEach((listener) => listener(arg));
    };
    this.removeAllListeners = () => {
      this._listeners.clear();
    };
    this.addListener = (listener) => {
      const id = this._listenerIndex;
      this._listeners.set(id, listener);
      this._listenerIndex++;
      const removeListener = () => {
        this._listeners.delete(id);
      };
      return { removeListener };
    };
    this.addOneTimeListener = (listener) => {
      const off = this.addListener((arg) => {
        off.removeListener();
        listener(arg);
      });
      return off;
    };
    this.asPromise = (timeLimit) => new Promise((resolve, reject) => {
      let removeListener = () => {
      };
      const timeout = timeLimit && setTimeout(() => {
        reject("Event asPromise timeout");
        removeListener();
      }, timeLimit);
      const off = this.addOneTimeListener((arg) => {
        if (timeout)
          clearTimeout(timeout);
        resolve(arg);
      });
      removeListener = off.removeListener;
    });
  }
};

// src/version.ts
init_process();
var PACKAGE_VERSION = "0.2.0-beta.0";

// src/socket.ts
var ServerEventType = ["open", "sendRequestSignalingMessage", "sendResponseSignalingMessage", "acknowledge"];
var getReconnectWaitTime = (reconnectCount) => {
  return (__pow(2, reconnectCount) + Math.random()) * 1e3;
};
var Socket = class {
  constructor({ channelId, channelName, memberId, memberName, sessionEndpoint, token, logger }) {
    this._isOpen = false;
    this._isDestroyed = false;
    this._reconnectCount = 0;
    this.connectionState = "closed";
    this.onConnectionStateChanged = new Event();
    this.onOpened = new Event();
    this.onEventReceived = new Event();
    this.onConnectionFailed = new Event();
    this._sessionEndpoint = sessionEndpoint;
    this._channelId = channelId;
    this._channelName = channelName;
    this._memberId = memberId;
    this._memberName = memberName;
    this._token = token;
    this._logger = logger;
    this._connect();
  }
  _setConnectionState(state) {
    this._logger.debug(`connectionState changed : ${state}`);
    this.connectionState = state;
    this.onConnectionStateChanged.emit(state);
  }
  _connect() {
    let ws;
    try {
      const subProtocol = `SkyWayAuthToken!${this._token}`;
      const wsProperties = {
        channelId: this._channelId,
        channelName: this._channelName,
        memberId: this._memberId,
        memberName: this._memberName,
        platform: "javascript",
        version: PACKAGE_VERSION
      };
      const queryString = Object.entries(wsProperties).filter(([_, v]) => v !== void 0).map((pair) => pair.join("=")).join("&");
      const wsURL = `${this._sessionEndpoint}?${queryString}`;
      ws = new import_isomorphic_ws.default(wsURL, subProtocol);
      this._logger.debug(`Connecting to signaling-server: ${this._sessionEndpoint}`);
      ws.onerror = (event) => {
        this._logger.error("WebSocket error occurred", event.error);
        ws.close(4202);
      };
    } catch (err) {
      const error = err instanceof Error ? err : new Error();
      this._logger.error("Failed to create WebSocket instance", error);
      this.reconnect();
      return;
    }
    ws.onopen = () => {
      this._logger.debug("Connected to signaling-server");
    };
    ws.onclose = (event) => {
      const logMessage = "Close event fired: " + JSON.stringify({ code: event.code, reason: event.reason, type: event.type });
      if (4100 <= event.code && event.code <= 4199) {
        this._logger.error(logMessage, new Error());
      } else {
        this._logger.debug(logMessage);
      }
      if (event.code !== 1e3 && !(4e3 <= event.code && event.code <= 4199)) {
        this.reconnect();
        return;
      }
      if (event.code === 4e3) {
        return;
      }
      this._logger.debug("Closed the connection to signaling-server");
      this.onConnectionFailed.emit();
      this.destroy();
    };
    ws.onmessage = (event) => {
      this._messageHandler(event.data);
    };
    this._ws = ws;
  }
  updateAuthToken(token) {
    this._token = token;
  }
  reconnect() {
    if (this._ws !== void 0) {
      this._ws.close(4e3);
    }
    this._ws = void 0;
    this._isOpen = false;
    if (this._reconnectCount >= 8) {
      this.onConnectionFailed.emit();
      this.destroy();
      this._logger.error("Failed to reconnect for eight times", new Error());
    } else {
      this._setConnectionState("reconnecting");
      const waitTime = getReconnectWaitTime(this._reconnectCount);
      this._reconnectTimer = setTimeout(() => {
        this._connect();
        this._reconnectCount++;
        this._logger.debug(`Try to reconnect: count = ${this._reconnectCount}`);
      }, waitTime);
    }
  }
  destroy() {
    this._isDestroyed = true;
    this._setConnectionState("closed");
    this.onConnectionStateChanged.removeAllListeners();
    this.onOpened.removeAllListeners();
    this.onEventReceived.removeAllListeners();
    this.onConnectionFailed.removeAllListeners();
    if (this._reconnectTimer) {
      clearTimeout(this._reconnectTimer);
    }
    if (this._ws !== void 0) {
      this._ws.close(1e3);
    }
  }
  send(clientEvent) {
    return new Promise((resolve, reject) => {
      const retrySend = () => {
        this.onOpened.addOneTimeListener(() => {
          this.send(clientEvent).then(() => {
            resolve();
          }).catch((err) => {
            reject(err);
          });
        });
        this.onConnectionFailed.addOneTimeListener(() => {
          reject(new Error("Connection failed"));
        });
      };
      if (this._isDestroyed) {
        reject(new Error("The socket is already destroyed"));
        return;
      }
      if (this._ws === void 0 || !this._isOpen) {
        this._logger.debug(
          "Retry send the client event when connected because WebSocket is undefined or isOpen = false"
        );
        retrySend();
        return;
      }
      this._logger.debug(`Send the event: ${clientEvent.data}`);
      this._ws.send(clientEvent.data, (err) => {
        if (err) {
          if (this._ws === void 0 || !this._isOpen || this._ws.readyState !== import_isomorphic_ws.default.OPEN) {
            this._logger.debug("Retry send the client event when connected because WebSocket.send failed");
            retrySend();
            return;
          }
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }
  _messageHandler(data) {
    if (typeof data !== "string") {
      this._logger.error("Received invalid message: not string", new Error());
      return;
    }
    let parsedData;
    try {
      parsedData = JSON.parse(data);
    } catch (err) {
      const error = err instanceof Error ? err : new Error();
      this._logger.error("Received invalid message: parse error", error);
      return;
    }
    if (!isServerEvent(parsedData)) {
      this._logger.error(`Received invalid message: ${parsedData}`, new Error());
      return;
    }
    if (parsedData.event === "open") {
      this._logger.debug("Received a open event");
      this._isOpen = true;
      this._setConnectionState("connected");
      if (this._reconnectCount !== 0) {
        this._reconnectCount = 0;
        this._logger.debug("Succeeded to reconnect");
      }
      this.onOpened.emit();
    } else {
      this._logger.debug(`Received the event: ${parsedData.event}, payload: ${JSON.stringify(parsedData.payload)}`);
      this.onEventReceived.emit(parsedData);
    }
  }
};
function isServerEvent(data) {
  if (!data || typeof data !== "object")
    return false;
  if (typeof data.event !== "string" || !ServerEventType.includes(data.event))
    return false;
  if (typeof data.eventId !== "string")
    return false;
  if (data.payload && typeof data.payload !== "object")
    return false;
  return true;
}

// src/signalingClient.ts
var SIGNALING_SERVER_DOMAIN = "signaling.skyway.ntt.com";
var API_VERSION = "v1";
var SignalingClient = class {
  constructor({ token, channelId, channelName, memberId, memberName }, options) {
    this.onConnectionStateChanged = new Event();
    this.onConnectionFailed = new Event();
    this.onRequested = new Event();
    this._connectivityCheckTimers = /* @__PURE__ */ new Map();
    this._responseCallbacks = /* @__PURE__ */ new Map();
    this._acknowledgeCallbacks = /* @__PURE__ */ new Map();
    this._token = token;
    this._channelId = channelId;
    this._channelName = channelName;
    this._memberId = memberId;
    this._memberName = memberName;
    const defaultOptions = {
      connectivityCheckIntervalSec: 30,
      signalingServerDomain: SIGNALING_SERVER_DOMAIN,
      secure: true,
      logger: {
        debug: (message) => {
          console.debug(message);
        },
        error: (error) => {
          console.error(error);
        }
      }
    };
    this._options = Object.assign({}, defaultOptions, options != null ? options : {});
    this._logger = this._options.logger;
    this._logger.debug(`Created instance with the options: ${this._options}`);
  }
  get connectionState() {
    var _a, _b;
    return (_b = (_a = this._socket) == null ? void 0 : _a.connectionState) != null ? _b : "closed";
  }
  connect() {
    return __async(this, null, function* () {
      const WSProtocol = this._options.secure ? "wss" : "ws";
      const signalingServerDomain = this._options.signalingServerDomain || SIGNALING_SERVER_DOMAIN;
      this._socket = new Socket({
        sessionEndpoint: `${WSProtocol}://${signalingServerDomain}/${API_VERSION}/ws`,
        channelId: this._channelId,
        channelName: this._channelName,
        memberId: this._memberId,
        memberName: this._memberName,
        token: this._token,
        logger: this._logger
      });
      this._socket.onEventReceived.addListener((data) => {
        try {
          this._eventReceivedHandler(data);
        } catch (error) {
          this._logger.error("in _eventReceivedHandler", error);
        }
      });
      this._socket.onConnectionFailed.addListener(() => {
        this.onConnectionFailed.emit();
      });
      this._socket.onConnectionStateChanged.addListener((state) => {
        this.onConnectionStateChanged.emit(state);
      });
      yield this._socket.onOpened.asPromise(15 * 1e3);
      this._startConnectivityCheck();
    });
  }
  disconnect() {
    var _a;
    this._stopConnectivityCheck();
    (_a = this._socket) == null ? void 0 : _a.destroy();
    this._socket = void 0;
    this._responseCallbacks.clear();
    this._acknowledgeCallbacks.clear();
  }
  _startConnectivityCheck() {
    if (this._connectivityCheckInterval) {
      this._logger.debug("connectivity check timer is already set");
      return;
    }
    this._connectivityCheckInterval = setInterval(() => {
      var _a;
      const clientEvent = new ClientEvent("checkConnectivity");
      (_a = this._socket) == null ? void 0 : _a.send(clientEvent).catch(() => {
        this._acknowledgeCallbacks.delete(clientEvent.eventId);
      });
      this._connectivityCheckTimers.set(
        clientEvent.eventId,
        setTimeout(() => {
          var _a2;
          this._acknowledgeCallbacks.delete(clientEvent.eventId);
          (_a2 = this._socket) == null ? void 0 : _a2.reconnect();
          this._logger.debug("connectivity check timer is expired");
        }, 5 * 1e3)
      );
      this._setAcknowledgeCallback(clientEvent.eventId, (data) => {
        var _a2;
        const timer = this._connectivityCheckTimers.get(clientEvent.eventId);
        if (timer) {
          clearTimeout(timer);
          this._connectivityCheckTimers.delete(clientEvent.eventId);
        }
        if (!data.ok) {
          (_a2 = this._socket) == null ? void 0 : _a2.reconnect();
          this._logger.debug("connectivity check response from server was not ok");
        }
      });
    }, this._options.connectivityCheckIntervalSec * 1e3);
    this._logger.debug("Started connectivity check timer");
  }
  _stopConnectivityCheck() {
    if (!this._connectivityCheckInterval) {
      this._logger.debug("connectivity check timer is not set");
      return;
    }
    clearInterval(this._connectivityCheckInterval);
    this._connectivityCheckInterval = void 0;
    this._logger.debug("Stopped connectivity check timer");
    for (const [_, timer] of this._connectivityCheckTimers) {
      clearTimeout(timer);
    }
    this._connectivityCheckTimers.clear();
  }
  request(target, data, timeoutSec = 10) {
    validateTarget(target);
    validateData(data);
    return new Promise((resolve, reject) => {
      if (this._socket === void 0) {
        reject(new Error("websocket is not connected"));
        return;
      }
      const payload = {
        dst: target,
        data
      };
      const clientEvent = new ClientEvent("sendRequestSignalingMessage", payload);
      const timer = setTimeout(() => {
        this._acknowledgeCallbacks.delete(clientEvent.eventId);
        reject(new Error("request timeout"));
      }, timeoutSec * 1e3);
      this._setResponseCallback(clientEvent.eventId, (data2) => {
        clearTimeout(timer);
        resolve(data2);
      });
      this._setAcknowledgeCallback(clientEvent.eventId, (data2) => {
        if (!data2.ok) {
          clearTimeout(timer);
          reject(data2);
        }
      });
      this._socket.send(clientEvent).catch((err) => {
        this._acknowledgeCallbacks.delete(clientEvent.eventId);
        clearTimeout(timer);
        reject(err);
      });
    });
  }
  _response(target, requestEventId, data, timeoutSec) {
    return new Promise((resolve, reject) => {
      validateData(data);
      if (this._socket === void 0) {
        reject(new Error("websocket is not connected"));
        return;
      }
      const payload = {
        dst: target,
        requestEventId,
        data
      };
      const clientEvent = new ClientEvent("sendResponseSignalingMessage", payload);
      const timer = setTimeout(() => {
        this._acknowledgeCallbacks.delete(clientEvent.eventId);
        reject(new Error("response timeout"));
      }, timeoutSec * 1e3);
      this._setAcknowledgeCallback(clientEvent.eventId, (data2) => {
        clearTimeout(timer);
        if (data2.ok) {
          resolve();
        } else {
          reject(data2);
        }
      });
      this._socket.send(clientEvent).catch((err) => {
        this._acknowledgeCallbacks.delete(clientEvent.eventId);
        clearTimeout(timer);
        reject(err);
      });
    });
  }
  updateSkyWayAuthToken(token, timeoutSec = 10) {
    return new Promise((resolve, reject) => {
      if (this._socket === void 0) {
        reject(new Error("websocket is not connected"));
        return;
      }
      const payload = {
        token
      };
      const clientEvent = new ClientEvent("updateSkyWayAuthToken", payload);
      const timer = setTimeout(() => {
        this._acknowledgeCallbacks.delete(clientEvent.eventId);
        reject(new Error("updateSkyWayAuthToken timeout"));
      }, timeoutSec * 1e3);
      this._setAcknowledgeCallback(clientEvent.eventId, (data) => {
        clearTimeout(timer);
        if (data.ok) {
          if (this._socket === void 0) {
            reject(new Error("websocket is not connected"));
            return;
          }
          this._socket.updateAuthToken(token);
          resolve();
        } else {
          reject(data);
        }
      });
      this._socket.send(clientEvent).catch((err) => {
        this._acknowledgeCallbacks.delete(clientEvent.eventId);
        clearTimeout(timer);
        reject(err);
      });
    });
  }
  _eventReceivedHandler(data) {
    switch (data.event) {
      case "acknowledge":
        this._acknowledgeHandler(data.payload);
        break;
      case "sendRequestSignalingMessage":
        this._eventMessageRequestHandler(data.payload);
        break;
      case "sendResponseSignalingMessage":
        this._eventMessageResponseHandler(data.payload);
        break;
      case "open":
        break;
      default: {
        const _ = data.event;
        this._logger.debug(`Unknown event: ${data.event}`);
      }
    }
  }
  _acknowledgeHandler(payload) {
    if (!isAcknowledgePayload(payload)) {
      throw new Error("Invalid payload");
    }
    const { eventId } = payload;
    if (!this._acknowledgeCallbacks.has(eventId)) {
      throw new Error(`acknowledge event has unknown eventId: ${eventId}`);
    }
    const callback = this._acknowledgeCallbacks.get(eventId);
    if (callback) {
      this._acknowledgeCallbacks.delete(eventId);
      callback(payload);
    }
  }
  _eventMessageRequestHandler(payload) {
    if (!isMessagePayload(payload)) {
      throw new Error("Invalid payload");
    }
    if (!payload.requestEventId) {
      throw new Error("Invalid payload");
    }
    const src = payload.src;
    const requestEventId = payload.requestEventId;
    const reply = (data, timeout = 10) => __async(this, null, function* () {
      yield this._response(src, requestEventId, data, timeout);
    });
    this.onRequested.emit({
      data: payload.data,
      reply,
      requestEventId: payload.requestEventId,
      src: payload.src
    });
  }
  _eventMessageResponseHandler(payload) {
    if (!isMessagePayload(payload)) {
      throw new Error("Invalid payload");
    }
    if (!payload.requestEventId || !this._responseCallbacks.has(payload.requestEventId)) {
      throw new Error(`received response has unknown eventId: ${payload.requestEventId}`);
    }
    const callback = this._responseCallbacks.get(payload.requestEventId);
    if (callback) {
      this._responseCallbacks.delete(payload.requestEventId);
      callback(payload.data);
    }
  }
  _setResponseCallback(eventId, callback) {
    this._responseCallbacks.set(eventId, callback);
  }
  _setAcknowledgeCallback(eventId, callback) {
    this._acknowledgeCallbacks.set(eventId, callback);
  }
};
function validateData(data) {
  if (!data || typeof data !== "object") {
    throw new Error("the type of data must be object");
  }
}
function validateTarget(target) {
  if (!isMember(target)) {
    throw new Error("the type of target must be {id: string, name: string}");
  }
  if (!validate_default(target.id)) {
    throw new Error("the type of target.id must be uuid format");
  }
}

// src/utils/logger.ts
init_process();
export {
  Event,
  SignalingClient
};

/*
@skyway-sdk/signaling-client@1.0.3

MIT

https://github.com/skyway/js-sdk

MIT License

Copyright (c) 2023 NTT Communications Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


---

isomorphic-fetch@3.0.0

MIT

https://github.com/matthew-andrews/isomorphic-fetch

The MIT License (MIT)

Copyright (c) 2015 Matt Andrews

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


---

isomorphic-ws@4.0.1

MIT

https://github.com/heineiuo/isomorphic-ws

The MIT License (MIT)

Copyright (c) 2018 Zejin Zhuang <heineiuo@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---

node-fetch@2.7.0

MIT

https://github.com/bitinn/node-fetch

The MIT License (MIT)

Copyright (c) 2016 David Frank

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



---

tr46@0.0.3

MIT

https://github.com/Sebmaster/tr46.js

The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


---

uuid@9.0.0

MIT

https://github.com/uuidjs/uuid

The MIT License (MIT)

Copyright (c) 2010-2020 Robert Kieffer and other contributors

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


---

webidl-conversions@3.0.1

BSD-2-Clause

https://github.com/jsdom/webidl-conversions

# The BSD 2-Clause License

Copyright (c) 2014, Domenic Denicola
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


---

whatwg-fetch@3.6.19

MIT

https://github.com/github/fetch

Copyright (c) 2014-2023 GitHub, Inc.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


---

whatwg-url@5.0.0

MIT

https://github.com/jsdom/whatwg-url

---

ws@7.5.9

MIT

https://github.com/websockets/ws

The MIT License (MIT)

Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


---

*/